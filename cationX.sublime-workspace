{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"canva",
				"canvas"
			],
			[
				"creat",
				"createElement"
			],
			[
				"firs",
				"firstRendered"
			],
			[
				"eti",
				"etiqueta"
			],
			[
				"remov",
				"remove"
			],
			[
				"web",
				"webView"
			],
			[
				"bar",
				"barcode"
			],
			[
				"data",
				"dataToArray"
			],
			[
				"pdf",
				"pdf2"
			],
			[
				"add",
				"addEventListener"
			],
			[
				"render",
				"renderPDF"
			],
			[
				"get",
				"getBool"
			],
			[
				"str",
				"stringify"
			],
			[
				"logo",
				"logoutUser"
			],
			[
				"Pro",
				"Properties"
			],
			[
				"backgroundC",
				"backgroundColor:'black"
			],
			[
				"chec",
				"Checkin"
			],
			[
				"st",
				"stringify"
			],
			[
				"use",
				"username"
			],
			[
				"long",
				"longitude"
			],
			[
				"ch",
				"checkin"
			],
			[
				"styleCont",
				"styleContainer"
			],
			[
				"crea",
				"createView"
			],
			[
				"o",
				"Op"
			],
			[
				"mul",
				"multiplyE"
			],
			[
				"func",
				"function"
			],
			[
				"colo",
				"colorbox"
			],
			[
				"containe",
				"container_12"
			],
			[
				"bro",
				"browser"
			],
			[
				"query",
				"jQuery"
			],
			[
				"loca",
				"localhost"
			],
			[
				"tr",
				"transparent"
			],
			[
				"bord-",
				"border-bottom"
			],
			[
				"is_",
				"is_active_sidebar"
			],
			[
				"end",
				"endif"
			],
			[
				"get_the_",
				"get_the_ID"
			],
			[
				"inlie",
				"inline-block"
			],
			[
				"inline",
				"inline-block"
			],
			[
				"vert",
				"vertical-align"
			],
			[
				"under",
				"underline"
			],
			[
				"backg",
				"background"
			],
			[
				"openingM",
				"openingMin"
			],
			[
				"c",
				"characteristics"
			],
			[
				"show",
				"showError"
			],
			[
				"edit",
				"editPlace"
			],
			[
				"se",
				"selected=\"selected"
			],
			[
				"closing",
				"closingMon"
			],
			[
				"opening",
				"openingMon"
			],
			[
				"var",
				"var_dump"
			],
			[
				"addProductS",
				"addProductSubcat"
			],
			[
				"idSubcat",
				"idSubcategory"
			],
			[
				"addProd",
				"addProduct"
			],
			[
				"product",
				"products_m"
			],
			[
				"idSub",
				"idSubclass"
			],
			[
				"cl",
				"class=\"message"
			],
			[
				"idS",
				"idSubclass"
			],
			[
				"idsubc",
				"idSubclass"
			],
			[
				"subcat",
				"subcatText"
			],
			[
				"idSubc",
				"idSubcat"
			],
			[
				"auto",
				"autoproducts"
			],
			[
				"produt",
				"products"
			],
			[
				"te",
				"template"
			],
			[
				"getB",
				"getByState"
			],
			[
				"last",
				"lastlogin"
			],
			[
				"cat",
				"category"
			],
			[
				"categ",
				"category"
			],
			[
				"suba",
				"subcategory"
			],
			[
				"size",
				"sizeof"
			],
			[
				"subcategor",
				"subcategory"
			],
			[
				"stat",
				"state"
			],
			[
				"max",
				"max-height"
			],
			[
				"user_p",
				"user_photo"
			],
			[
				"result",
				"results"
			],
			[
				"RES",
				"result"
			],
			[
				"getBy",
				"getByID"
			],
			[
				"admin",
				"admin/user"
			],
			[
				"user_pas",
				"user_pass_conf"
			],
			[
				"view",
				"view"
			],
			[
				"thr",
				"throbber"
			],
			[
				"base",
				"base_url"
			],
			[
				"media",
				"mediaPath"
			],
			[
				"elemen",
				"element"
			],
			[
				"eleme",
				"element"
			],
			[
				"getMedia",
				"getMediaByTitle"
			],
			[
				"mode",
				"model"
			],
			[
				"h",
				"h1	Tag"
			],
			[
				"wh",
				"where"
			],
			[
				"state_",
				"state_id"
			],
			[
				"getb",
				"getByID"
			],
			[
				"subca",
				"subcategory"
			],
			[
				"resu",
				"results"
			],
			[
				"subcateg",
				"subcategory"
			],
			[
				"cate",
				"category"
			],
			[
				"cat_",
				"cat_id"
			],
			[
				"opt",
				"option	Tag"
			],
			[
				"els",
				"else"
			],
			[
				"bas",
				"base_url"
			],
			[
				"temp",
				"template"
			],
			[
				"v",
				"view"
			],
			[
				"post",
				"post"
			],
			[
				"pos",
				"post"
			],
			[
				"vie",
				"viewbody"
			],
			[
				"strto",
				"strtolower"
			],
			[
				"th",
				"this"
			],
			[
				"arra",
				"array"
			],
			[
				"echo",
				"echo"
			],
			[
				"user",
				"user"
			],
			[
				"marg",
				"margin"
			],
			[
				"producto",
				"productos_movac"
			],
			[
				"the",
				"the_post"
			],
			[
				"html",
				"html_save"
			],
			[
				"html_",
				"html_form"
			],
			[
				"html_bo",
				"html_body_conf"
			],
			[
				"tin",
				"tinyMCE"
			],
			[
				"ti",
				"tiny_mce"
			],
			[
				"dnc",
				"dnc_budgets"
			],
			[
				"bu",
				"budget"
			],
			[
				"budget",
				"budget_id"
			],
			[
				"bud",
				"budgetID"
			],
			[
				"backgr",
				"background-image"
			],
			[
				"selec",
				"selected"
			],
			[
				"mod",
				"modify"
			],
			[
				"users",
				"users_m"
			],
			[
				"token",
				"tokenurl"
			],
			[
				"ech",
				"echo"
			],
			[
				"tex",
				"text"
			],
			[
				"isVe",
				"isVegan"
			],
			[
				"place",
				"places_m"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Resources/html/viewer.html",
			"settings":
			{
				"buffer_size": 1363,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Resources/app.js",
			"settings":
			{
				"buffer_size": 2451,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "(function(){\n    var ventana = Ti.UI.createWindow({\n        title: 'Cationes',\n        backgroundColor: '#2D2D2D'\n    });\n    var etiqueta = Ti.UI.createLabel({\n        text: 'Hola'\n    });\n\n    ventana.add(etiqueta);\n    ventana.open();\n})();",
			"settings":
			{
				"buffer_size": 243,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<p>\n<pre>\n<code>\n  var a = 3;\n</code>\n</pre>\n</p>",
			"settings":
			{
				"buffer_size": 49,
				"line_ending": "Unix",
				"name": "<p>"
			}
		},
		{
			"contents": "/*\n * Ionic Educational Scanner App\n * Copyright under GPL v2 License Terms\n * 2013 Hiram J. Perez <worg@linxumail.org>, Jose Antonio Garcia <jgarcia@upmh.edu.mx>\n * Barcodes are in EAN13 standard\n */\n\n(function() {\nvar scanWin = Titanium.UI.createWindow();\n\nvar infoWin = Ti.UI.createWindow({\n    title: 'Cationes',\n    backgroundColor: '#2D2D2D',\n    exitOnClose: false\n});\n\n// load the Scandit SDK module\nvar scanditsdk = require(\"com.mirasense.scanditsdk\"); \n\n// disable the status bar for the camera view on the iphone and ipad\nif(Ti.Platform.osname == 'iphone' || Ti.Platform.osname == 'ipad'){\n     Titanium.UI.iPhone.statusBarHidden = true;\n}\n\nvar webView = Ti.UI.createWebView({\n    url:'/html/viewer.html'\n});\n\n/***DEBUG***/\n//var file = Ti.Filesystem.getFile(Ti.Filesystem.resourcesDirectory, 'html','sl', 'Zaratustra1.pdf');\n\n\n// instantiate the Scandit SDK Barcode Picker view\nvar picker = scanditsdk.createView({\n    \"width\":Ti.Platform.displayCaps.platformWidth,\n    \"height\":Ti.Platform.displayCaps.platformHeight\n}); \n\ninfoWin.add(webView);\n\n// Initialize the barcode picker,\npicker.init(\"fjCZtnAvEeKbwJ7Tz2wvUhE6BiI1y5ePzTGJhIf1R8U\", 0);\n//seteaomoss los mensajes \npicker.setTextForInitialScanScreenState(\"Alínea el código con el rectángulo\");\npicker.setTextForBarcodeDecodingInProgress('Escaneando…');\n\n// Set callback functions for when scanning succeeds and for when the\n// scanning is canceled.\n//var file, blob, buff, stream;\npicker.setSuccessCallback(function(e) {\n    picker.stopScanning();\n    alert('Scanning');\n    var file = Ti.Filesystem.getFile(Ti.Filesystem.resourcesDirectory, 'html', 'sl', e.barcode + '.pdf'); // a partir del codigo obtenemos el archivo\n    if(file.exists()){\n            var blob = file.read();\n            var b64 = Ti.Utils.base64encode(blob);\n            infoWin.open({modal:true, loading: true});\n            setTimeout(function(e){\n                Ti.App.fireEvent('renderPDF', { pdf: b64.text});\n            },4000); // lanzamos el renderer del pdf en el navegador            \n    }else{\n        alert('Código erroneo, intente de nuevo');\n    }\n});\n\npicker.setCancelCallback(function(e) { alert(\"Cancelado\");}); \n// add a tool bar at the bottom of the scan view with a cancel button\n// (iphone/ipad only)\npicker.showToolBar(true);\n\n \n// Create a window to add the picker to and display it.\nscanWin.add(picker);\npicker.startScanning();\nscanWin.open();\n})();\n\n",
			"settings":
			{
				"buffer_size": 2417,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Resources/html/viewer_1.html",
			"settings":
			{
				"buffer_size": 1363,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\n/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals PDFJS, PDFBug, FirefoxCom, Stats */\n\n'use strict';\n\n//var DEFAULT_URL = 'compressed.tracemonkey-pldi-09.pdf';\nvar DEFAULT_SCALE = 'page-width';\nvar DEFAULT_SCALE_DELTA = 1.1;\nvar UNKNOWN_SCALE = 0;\nvar CACHE_SIZE = 40;\nvar CSS_UNITS = 96.0 / 72.0;\nvar SCROLLBAR_PADDING = 40;\nvar VERTICAL_PADDING = 5;\nvar MIN_SCALE = 0.25;\nvar MAX_SCALE = 4.0;\nvar IMAGE_DIR = './images/';\nvar SETTINGS_MEMORY = 20;\nvar ANNOT_MIN_SIZE = 10;\nvar RenderingStates = {\n  INITIAL: 0,\n  RUNNING: 1,\n  PAUSED: 2,\n  FINISHED: 3\n};\nvar FindStates = {\n  FIND_FOUND: 0,\n  FIND_NOTFOUND: 1,\n  FIND_WRAPPED: 2,\n  FIND_PENDING: 3\n};\n\n  PDFJS.workerSrc = 'pdf.js';\n\nvar mozL10n = document.mozL10n || document.webL10n;\n\n\nfunction getFileName(url) {\n  var anchor = url.indexOf('#');\n  var query = url.indexOf('?');\n  var end = Math.min(\n    anchor > 0 ? anchor : url.length,\n    query > 0 ? query : url.length);\n  return url.substring(url.lastIndexOf('/', end) + 1, end);\n}\n\nfunction scrollIntoView(element, spot) {\n  // Assuming offsetParent is available (it's not available when viewer is in\n  // hidden iframe or object). We have to scroll: if the offsetParent is not set\n  // producing the error. See also animationStartedClosure.\n  var parent = element.offsetParent;\n  var offsetY = element.offsetTop + element.clientTop;\n  if (!parent) {\n    console.error('offsetParent is not set -- cannot scroll');\n    return;\n  }\n  while (parent.clientHeight == parent.scrollHeight) {\n    offsetY += parent.offsetTop;\n    parent = parent.offsetParent;\n    if (!parent)\n      return; // no need to scroll\n  }\n  if (spot)\n    offsetY += spot.top;\n  parent.scrollTop = offsetY;\n}\n\nvar Cache = function cacheCache(size) {\n  var data = [];\n  this.push = function cachePush(view) {\n    var i = data.indexOf(view);\n    if (i >= 0)\n      data.splice(i);\n    data.push(view);\n    if (data.length > size)\n      data.shift().destroy();\n  };\n};\n\nvar ProgressBar = (function ProgressBarClosure() {\n\n  function clamp(v, min, max) {\n    return Math.min(Math.max(v, min), max);\n  }\n\n  function ProgressBar(id, opts) {\n\n    // Fetch the sub-elements for later\n    this.div = document.querySelector(id + ' .progress');\n\n    // Get options, with sensible defaults\n    this.height = opts.height || 100;\n    this.width = opts.width || 100;\n    this.units = opts.units || '%';\n\n    // Initialize heights\n    this.div.style.height = this.height + this.units;\n    this._indeterminate = true;\n  }\n\n  ProgressBar.prototype = {\n\n    updateBar: function ProgressBar_updateBar() {\n      if (this._indeterminate) {\n        this.div.classList.add('indeterminate');\n        return;\n      }\n\n      var progressSize = this.width * this._percent / 100;\n\n      if (this._percent > 95)\n        this.div.classList.add('full');\n      else\n        this.div.classList.remove('full');\n      this.div.classList.remove('indeterminate');\n\n      this.div.style.width = progressSize + this.units;\n    },\n\n    get percent() {\n      return this._percent;\n    },\n\n    set percent(val) {\n      this._indeterminate = isNaN(val);\n      this._percent = clamp(val, 0, 100);\n      this.updateBar();\n    }\n  };\n\n  return ProgressBar;\n})();\n\n\n// Settings Manager - This is a utility for saving settings\n// First we see if localStorage is available\n// If not, we use FUEL in FF\n// Use asyncStorage for B2G\nvar Settings = (function SettingsClosure() {\n  var isLocalStorageEnabled = (function localStorageEnabledTest() {\n    // Feature test as per http://diveintohtml5.info/storage.html\n    // The additional localStorage call is to get around a FF quirk, see\n    // bug #495747 in bugzilla\n    try {\n      return 'localStorage' in window && window['localStorage'] !== null &&\n          localStorage;\n    } catch (e) {\n      return false;\n    }\n  })();\n\n  function Settings(fingerprint) {\n    this.fingerprint = fingerprint;\n    this.initializedPromise = new PDFJS.Promise();\n\n    var resolvePromise = (function settingsResolvePromise(db) {\n      this.initialize(db || '{}');\n      this.initializedPromise.resolve();\n    }).bind(this);\n\n\n\n    if (isLocalStorageEnabled)\n      resolvePromise(localStorage.getItem('database'));\n  }\n\n  Settings.prototype = {\n    initialize: function settingsInitialize(database) {\n      database = JSON.parse(database);\n      if (!('files' in database))\n        database.files = [];\n      if (database.files.length >= SETTINGS_MEMORY)\n        database.files.shift();\n      var index;\n      for (var i = 0, length = database.files.length; i < length; i++) {\n        var branch = database.files[i];\n        if (branch.fingerprint == this.fingerprint) {\n          index = i;\n          break;\n        }\n      }\n      if (typeof index != 'number')\n        index = database.files.push({fingerprint: this.fingerprint}) - 1;\n      this.file = database.files[index];\n      this.database = database;\n    },\n\n    set: function settingsSet(name, val) {\n      if (!this.initializedPromise.isResolved)\n        return;\n\n      var file = this.file;\n      file[name] = val;\n      var database = JSON.stringify(this.database);\n\n\n\n      if (isLocalStorageEnabled)\n        localStorage.setItem('database', database);\n    },\n\n    get: function settingsGet(name, defaultValue) {\n      if (!this.initializedPromise.isResolved)\n        return defaultValue;\n\n      return this.file[name] || defaultValue;\n    }\n  };\n\n  return Settings;\n})();\n\nvar cache = new Cache(CACHE_SIZE);\nvar currentPageNumber = 1;\n\nvar PDFFindController = {\n  startedTextExtraction: false,\n\n  extractTextPromises: [],\n\n  // If active, find results will be highlighted.\n  active: false,\n\n  // Stores the text for each page.\n  pageContents: [],\n\n  pageMatches: [],\n\n  // Currently selected match.\n  selected: {\n    pageIdx: -1,\n    matchIdx: -1\n  },\n\n  // Where find algorithm currently is in the document.\n  offset: {\n    pageIdx: null,\n    matchIdx: null\n  },\n\n  resumePageIdx: null,\n\n  resumeCallback: null,\n\n  state: null,\n\n  dirtyMatch: false,\n\n  findTimeout: null,\n\n  initialize: function() {\n    var events = [\n      'find',\n      'findagain',\n      'findhighlightallchange',\n      'findcasesensitivitychange'\n    ];\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    for (var i = 0; i < events.length; i++) {\n      window.addEventListener(events[i], this.handleEvent);\n    }\n  },\n\n  calcFindMatch: function(pageIndex) {\n    var pageContent = this.pageContents[pageIndex];\n    var query = this.state.query;\n    var caseSensitive = this.state.caseSensitive;\n    var queryLen = query.length;\n\n    if (queryLen === 0) {\n      // Do nothing the matches should be wiped out already.\n      return;\n    }\n\n    if (!caseSensitive) {\n      pageContent = pageContent.toLowerCase();\n      query = query.toLowerCase();\n    }\n\n    var matches = [];\n\n    var matchIdx = -queryLen;\n    while (true) {\n      matchIdx = pageContent.indexOf(query, matchIdx + queryLen);\n      if (matchIdx === -1) {\n        break;\n      }\n\n      matches.push(matchIdx);\n    }\n    this.pageMatches[pageIndex] = matches;\n    this.updatePage(pageIndex);\n    if (this.resumePageIdx === pageIndex) {\n      var callback = this.resumeCallback;\n      this.resumePageIdx = null;\n      this.resumeCallback = null;\n      callback();\n    }\n  },\n\n  extractText: function() {\n    if (this.startedTextExtraction) {\n      return;\n    }\n    this.startedTextExtraction = true;\n\n    this.pageContents = [];\n    for (var i = 0, ii = PDFView.pdfDocument.numPages; i < ii; i++) {\n      this.extractTextPromises.push(new PDFJS.Promise());\n    }\n\n    var self = this;\n    function extractPageText(pageIndex) {\n      PDFView.pages[pageIndex].getTextContent().then(\n        function textContentResolved(data) {\n          // Build the find string.\n          var bidiTexts = data.bidiTexts;\n          var str = '';\n\n          for (var i = 0; i < bidiTexts.length; i++) {\n            str += bidiTexts[i].str;\n          }\n\n          // Store the pageContent as a string.\n          self.pageContents.push(str);\n\n          self.extractTextPromises[pageIndex].resolve(pageIndex);\n          if ((pageIndex + 1) < PDFView.pages.length)\n            extractPageText(pageIndex + 1);\n        }\n      );\n    }\n    extractPageText(0);\n    return this.extractTextPromise;\n  },\n\n  handleEvent: function(e) {\n    if (this.state === null || e.type !== 'findagain') {\n      this.dirtyMatch = true;\n    }\n    this.state = e.detail;\n    this.updateUIState(FindStates.FIND_PENDING);\n\n    this.extractText();\n\n    clearTimeout(this.findTimeout);\n    if (e.type === 'find') {\n      // Only trigger the find action after 250ms of silence.\n      this.findTimeout = setTimeout(this.nextMatch.bind(this), 250);\n    } else {\n      this.nextMatch();\n    }\n  },\n\n  updatePage: function(idx) {\n    var page = PDFView.pages[idx];\n\n    if (this.selected.pageIdx === idx) {\n      // If the page is selected, scroll the page into view, which triggers\n      // rendering the page, which adds the textLayer. Once the textLayer is\n      // build, it will scroll onto the selected match.\n      page.scrollIntoView();\n    }\n\n    if (page.textLayer) {\n      page.textLayer.updateMatches();\n    }\n  },\n\n  nextMatch: function() {\n    var pages = PDFView.pages;\n    var previous = this.state.findPrevious;\n    var numPages = PDFView.pages.length;\n\n    this.active = true;\n\n    if (this.dirtyMatch) {\n      // Need to recalculate the matches, reset everything.\n      this.dirtyMatch = false;\n      this.selected.pageIdx = this.selected.matchIdx = -1;\n      this.offset.pageIdx = previous ? numPages - 1 : 0;\n      this.offset.matchIdx = null;\n      this.hadMatch = false;\n      this.resumeCallback = null;\n      this.resumePageIdx = null;\n      this.pageMatches = [];\n      var self = this;\n\n      for (var i = 0; i < numPages; i++) {\n        // Wipe out any previous highlighted matches.\n        this.updatePage(i);\n\n        // As soon as the text is extracted start finding the matches.\n        this.extractTextPromises[i].onData(function(pageIdx) {\n          // Use a timeout since all the pages may already be extracted and we\n          // want to start highlighting before finding all the matches.\n          setTimeout(function() {\n            self.calcFindMatch(pageIdx);\n          });\n        });\n      }\n    }\n\n    // If there's no query there's no point in searching.\n    if (this.state.query === '') {\n      this.updateUIState(FindStates.FIND_FOUND);\n      return;\n    }\n\n    // If we're waiting on a page, we return since we can't do anything else.\n    if (this.resumeCallback) {\n      return;\n    }\n\n    var offset = this.offset;\n    // If there's already a matchIdx that means we are iterating through a\n    // page's matches.\n    if (offset.matchIdx !== null) {\n      var numPageMatches = this.pageMatches[offset.pageIdx].length;\n      if ((!previous && offset.matchIdx + 1 < numPageMatches) ||\n          (previous && offset.matchIdx > 0)) {\n        // The simple case, we just have advance the matchIdx to select the next\n        // match on the page.\n        this.hadMatch = true;\n        offset.matchIdx = previous ? offset.matchIdx - 1 : offset.matchIdx + 1;\n        this.updateMatch(true);\n        return;\n      }\n      // We went beyond the current page's matches, so we advance to the next\n      // page.\n      this.advanceOffsetPage(previous);\n    }\n    // Start searching through the page.\n    this.nextPageMatch();\n  },\n\n  nextPageMatch: function() {\n    if (this.resumePageIdx !== null)\n      console.error('There can only be one pending page.');\n\n    var matchesReady = function(matches) {\n      var offset = this.offset;\n      var numMatches = matches.length;\n      var previous = this.state.findPrevious;\n      if (numMatches) {\n        // There were matches for the page, so initialize the matchIdx.\n        this.hadMatch = true;\n        offset.matchIdx = previous ? numMatches - 1 : 0;\n        this.updateMatch(true);\n      } else {\n        // No matches attempt to search the next page.\n        this.advanceOffsetPage(previous);\n        if (offset.wrapped) {\n          offset.matchIdx = null;\n          if (!this.hadMatch) {\n            // No point in wrapping there were no matches.\n            this.updateMatch(false);\n            return;\n          }\n        }\n        // Search the next page.\n        this.nextPageMatch();\n      }\n    }.bind(this);\n\n    var pageIdx = this.offset.pageIdx;\n    var pageMatches = this.pageMatches;\n    if (!pageMatches[pageIdx]) {\n      // The matches aren't ready setup a callback so we can be notified,\n      // when they are ready.\n      this.resumeCallback = function() {\n        matchesReady(pageMatches[pageIdx]);\n      };\n      this.resumePageIdx = pageIdx;\n      return;\n    }\n    // The matches are finished already.\n    matchesReady(pageMatches[pageIdx]);\n  },\n\n  advanceOffsetPage: function(previous) {\n    var offset = this.offset;\n    var numPages = this.extractTextPromises.length;\n    offset.pageIdx = previous ? offset.pageIdx - 1 : offset.pageIdx + 1;\n    offset.matchIdx = null;\n    if (offset.pageIdx >= numPages || offset.pageIdx < 0) {\n      offset.pageIdx = previous ? numPages - 1 : 0;\n      offset.wrapped = true;\n      return;\n    }\n  },\n\n  updateMatch: function(found) {\n    var state = FindStates.FIND_NOTFOUND;\n    var wrapped = this.offset.wrapped;\n    this.offset.wrapped = false;\n    if (found) {\n      var previousPage = this.selected.pageIdx;\n      this.selected.pageIdx = this.offset.pageIdx;\n      this.selected.matchIdx = this.offset.matchIdx;\n      state = wrapped ? FindStates.FIND_WRAPPED : FindStates.FIND_FOUND;\n      // Update the currently selected page to wipe out any selected matches.\n      if (previousPage !== -1 && previousPage !== this.selected.pageIdx) {\n        this.updatePage(previousPage);\n      }\n    }\n    this.updateUIState(state, this.state.findPrevious);\n    if (this.selected.pageIdx !== -1) {\n      this.updatePage(this.selected.pageIdx, true);\n    }\n  },\n\n  updateUIState: function(state, previous) {\n    if (PDFView.supportsIntegratedFind) {\n      FirefoxCom.request('updateFindControlState',\n                         {result: state, findPrevious: previous});\n      return;\n    }\n    PDFFindBar.updateUIState(state, previous);\n  }\n};\n\nvar PDFFindBar = {\n  // TODO: Enable the FindBar *AFTER* the pagesPromise in the load function\n  // got resolved\n\n  opened: false,\n\n  initialize: function() {\n    this.bar = document.getElementById('findbar');\n    this.toggleButton = document.getElementById('viewFind');\n    this.findField = document.getElementById('findInput');\n    this.highlightAll = document.getElementById('findHighlightAll');\n    this.caseSensitive = document.getElementById('findMatchCase');\n    this.findMsg = document.getElementById('findMsg');\n    this.findStatusIcon = document.getElementById('findStatusIcon');\n\n    var self = this;\n    this.toggleButton.addEventListener('click', function() {\n      self.toggle();\n    });\n\n    this.findField.addEventListener('input', function() {\n      self.dispatchEvent('');\n    });\n\n    this.bar.addEventListener('keydown', function(evt) {\n      switch (evt.keyCode) {\n        case 13: // Enter\n          if (evt.target === self.findField) {\n            self.dispatchEvent('again', evt.shiftKey);\n          }\n          break;\n        case 27: // Escape\n          self.close();\n          break;\n      }\n    });\n\n    document.getElementById('findPrevious').addEventListener('click',\n      function() { self.dispatchEvent('again', true); }\n    );\n\n    document.getElementById('findNext').addEventListener('click', function() {\n      self.dispatchEvent('again', false);\n    });\n\n    this.highlightAll.addEventListener('click', function() {\n      self.dispatchEvent('highlightallchange');\n    });\n\n    this.caseSensitive.addEventListener('click', function() {\n      self.dispatchEvent('casesensitivitychange');\n    });\n  },\n\n  dispatchEvent: function(aType, aFindPrevious) {\n    var event = document.createEvent('CustomEvent');\n    event.initCustomEvent('find' + aType, true, true, {\n      query: this.findField.value,\n      caseSensitive: this.caseSensitive.checked,\n      highlightAll: this.highlightAll.checked,\n      findPrevious: aFindPrevious\n    });\n    return window.dispatchEvent(event);\n  },\n\n  updateUIState: function(state, previous) {\n    var notFound = false;\n    var findMsg = '';\n    var status = '';\n\n    switch (state) {\n      case FindStates.FIND_FOUND:\n        break;\n\n      case FindStates.FIND_PENDING:\n        status = 'pending';\n        break;\n\n      case FindStates.FIND_NOTFOUND:\n        findMsg = mozL10n.get('find_not_found', null, 'Phrase not found');\n        notFound = true;\n        break;\n\n      case FindStates.FIND_WRAPPED:\n        if (previous) {\n          findMsg = mozL10n.get('find_reached_top', null,\n                      'Reached top of document, continued from bottom');\n        } else {\n          findMsg = mozL10n.get('find_reached_bottom', null,\n                                'Reached end of document, continued from top');\n        }\n        break;\n    }\n\n    if (notFound) {\n      this.findField.classList.add('notFound');\n    } else {\n      this.findField.classList.remove('notFound');\n    }\n\n    this.findField.setAttribute('data-status', status);\n    this.findMsg.textContent = findMsg;\n  },\n\n  open: function() {\n    if (this.opened) return;\n\n    this.opened = true;\n    this.toggleButton.classList.add('toggled');\n    this.bar.classList.remove('hidden');\n    this.findField.select();\n    this.findField.focus();\n  },\n\n  close: function() {\n    if (!this.opened) return;\n\n    this.opened = false;\n    this.toggleButton.classList.remove('toggled');\n    this.bar.classList.add('hidden');\n\n    PDFFindController.active = false;\n  },\n\n  toggle: function() {\n    if (this.opened) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n};\n\nvar PDFView = {\n  pages: [],\n  thumbnails: [],\n  currentScale: UNKNOWN_SCALE,\n  currentScaleValue: null,\n  initialBookmark: document.location.hash.substring(1),\n  startedTextExtraction: false,\n  pageText: [],\n  container: null,\n  thumbnailContainer: null,\n  initialized: false,\n  fellback: false,\n  pdfDocument: null,\n  sidebarOpen: false,\n  pageViewScroll: null,\n  thumbnailViewScroll: null,\n  isFullscreen: false,\n  previousScale: null,\n  pageRotation: 0,\n  mouseScrollTimeStamp: 0,\n  mouseScrollDelta: 0,\n  lastScroll: 0,\n  previousPageNumber: 1,\n\n  // called once when the document is loaded\n  initialize: function pdfViewInitialize() {\n    var self = this;\n    var container = this.container = document.getElementById('viewerContainer');\n    this.pageViewScroll = {};\n    this.watchScroll(container, this.pageViewScroll, updateViewarea);\n\n    var thumbnailContainer = this.thumbnailContainer =\n                             document.getElementById('thumbnailView');\n    this.thumbnailViewScroll = {};\n    this.watchScroll(thumbnailContainer, this.thumbnailViewScroll,\n                     this.renderHighestPriority.bind(this));\n\n    PDFFindBar.initialize();\n    PDFFindController.initialize();\n\n    this.initialized = true;\n    container.addEventListener('scroll', function() {\n      self.lastScroll = Date.now();\n    }, false);\n  },\n\n  // Helper function to keep track whether a div was scrolled up or down and\n  // then call a callback.\n  watchScroll: function pdfViewWatchScroll(viewAreaElement, state, callback) {\n    state.down = true;\n    state.lastY = viewAreaElement.scrollTop;\n    viewAreaElement.addEventListener('scroll', function webViewerScroll(evt) {\n      var currentY = viewAreaElement.scrollTop;\n      var lastY = state.lastY;\n      if (currentY > lastY)\n        state.down = true;\n      else if (currentY < lastY)\n        state.down = false;\n      // else do nothing and use previous value\n      state.lastY = currentY;\n      callback();\n    }, true);\n  },\n\n  setScale: function pdfViewSetScale(val, resetAutoSettings, noScroll) {\n    if (val == this.currentScale)\n      return;\n\n    var pages = this.pages;\n    for (var i = 0; i < pages.length; i++)\n      pages[i].update(val * CSS_UNITS);\n\n    if (!noScroll && this.currentScale != val)\n      this.pages[this.page - 1].scrollIntoView();\n    this.currentScale = val;\n\n    var event = document.createEvent('UIEvents');\n    event.initUIEvent('scalechange', false, false, window, 0);\n    event.scale = val;\n    event.resetAutoSettings = resetAutoSettings;\n    window.dispatchEvent(event);\n  },\n\n  parseScale: function pdfViewParseScale(value, resetAutoSettings, noScroll) {\n    if ('custom' == value)\n      return;\n\n    var scale = parseFloat(value);\n    this.currentScaleValue = value;\n    if (scale) {\n      this.setScale(scale, true, noScroll);\n      return;\n    }\n\n    var container = this.container;\n    var currentPage = this.pages[this.page - 1];\n    if (!currentPage) {\n      return;\n    }\n\n    var pageWidthScale = (container.clientWidth - SCROLLBAR_PADDING) /\n                          currentPage.width * currentPage.scale / CSS_UNITS;\n    var pageHeightScale = (container.clientHeight - VERTICAL_PADDING) /\n                           currentPage.height * currentPage.scale / CSS_UNITS;\n    switch (value) {\n      case 'page-actual':\n        scale = 1;\n        break;\n      case 'page-width':\n        scale = pageWidthScale;\n        break;\n      case 'page-height':\n        scale = pageHeightScale;\n        break;\n      case 'page-fit':\n        scale = Math.min(pageWidthScale, pageHeightScale);\n        break;\n      case 'auto':\n        scale = Math.min(1.0, pageWidthScale);\n        break;\n    }\n    this.setScale(scale, resetAutoSettings, noScroll);\n\n    selectScaleOption(value);\n  },\n\n  zoomIn: function pdfViewZoomIn() {\n    var newScale = (this.currentScale * DEFAULT_SCALE_DELTA).toFixed(2);\n    newScale = Math.ceil(newScale * 10) / 10;\n    newScale = Math.min(MAX_SCALE, newScale);\n    this.parseScale(newScale, true);\n  },\n\n  zoomOut: function pdfViewZoomOut() {\n    var newScale = (this.currentScale / DEFAULT_SCALE_DELTA).toFixed(2);\n    newScale = Math.floor(newScale * 10) / 10;\n    newScale = Math.max(MIN_SCALE, newScale);\n    this.parseScale(newScale, true);\n  },\n\n  set page(val) {\n    var pages = this.pages;\n    var input = document.getElementById('pageNumber');\n    var event = document.createEvent('UIEvents');\n    event.initUIEvent('pagechange', false, false, window, 0);\n\n    if (!(0 < val && val <= pages.length)) {\n      this.previousPageNumber = val;\n      event.pageNumber = this.page;\n      window.dispatchEvent(event);\n      return;\n    }\n\n    pages[val - 1].updateStats();\n    this.previousPageNumber = currentPageNumber;\n    currentPageNumber = val;\n    event.pageNumber = val;\n    window.dispatchEvent(event);\n\n    // checking if the this.page was called from the updateViewarea function:\n    // avoiding the creation of two \"set page\" method (internal and public)\n    if (updateViewarea.inProgress)\n      return;\n\n    // Avoid scrolling the first page during loading\n    if (this.loading && val == 1)\n      return;\n\n    pages[val - 1].scrollIntoView();\n  },\n\n  get page() {\n    return currentPageNumber;\n  },\n\n  get supportsPrinting() {\n    var canvas = document.createElement('canvas');\n    var value = 'mozPrintCallback' in canvas;\n    // shadow\n    Object.defineProperty(this, 'supportsPrinting', { value: value,\n                                                      enumerable: true,\n                                                      configurable: true,\n                                                      writable: false });\n    return value;\n  },\n\n  get supportsFullscreen() {\n    var doc = document.documentElement;\n    var support = doc.requestFullscreen || doc.mozRequestFullScreen ||\n                  doc.webkitRequestFullScreen;\n\n    // Disable fullscreen button if we're in an iframe\n    if (!!window.frameElement)\n      support = false;\n\n    Object.defineProperty(this, 'supportsFullScreen', { value: support,\n                                                        enumerable: true,\n                                                        configurable: true,\n                                                        writable: false });\n    return support;\n  },\n\n  get supportsIntegratedFind() {\n    var support = false;\n    Object.defineProperty(this, 'supportsIntegratedFind', { value: support,\n                                                            enumerable: true,\n                                                            configurable: true,\n                                                            writable: false });\n    return support;\n  },\n\n  get supportsDocumentFonts() {\n    var support = true;\n    Object.defineProperty(this, 'supportsDocumentFonts', { value: support,\n                                                           enumerable: true,\n                                                           configurable: true,\n                                                           writable: false });\n    return support;\n  },\n\n  get isHorizontalScrollbarEnabled() {\n    var div = document.getElementById('viewerContainer');\n    return div.scrollWidth > div.clientWidth;\n  },\n\n  initPassiveLoading: function pdfViewInitPassiveLoading() {\n    if (!PDFView.loadingBar) {\n      PDFView.loadingBar = new ProgressBar('#loadingBar', {});\n    }\n\n    window.addEventListener('message', function window_message(e) {\n      var args = e.data;\n\n      if (typeof args !== 'object' || !('pdfjsLoadAction' in args))\n        return;\n      switch (args.pdfjsLoadAction) {\n        case 'progress':\n          PDFView.progress(args.loaded / args.total);\n          break;\n        case 'complete':\n          if (!args.data) {\n            PDFView.error(mozL10n.get('loading_error', null,\n                          'An error occurred while loading the PDF.'), e);\n            break;\n          }\n          PDFView.open(args.data, 0);\n          break;\n      }\n    });\n    FirefoxCom.requestSync('initPassiveLoading', null);\n  },\n\n  setTitleUsingUrl: function pdfViewSetTitleUsingUrl(url) {\n    this.url = url;\n    try {\n      this.setTitle(decodeURIComponent(getFileName(url)) || url);\n    } catch (e) {\n      // decodeURIComponent may throw URIError,\n      // fall back to using the unprocessed url in that case\n      this.setTitle(url);\n    }\n  },\n\n  setTitle: function pdfViewSetTitle(title) {\n    document.title = title;\n  },\n\n  open: function pdfViewOpen(url, scale, password) {\n    var parameters = {password: password};\n    if (typeof url === 'string') { // URL\n      this.setTitleUsingUrl(url);\n      parameters.url = url;\n    } else if (url && 'byteLength' in url) { // ArrayBuffer\n      parameters.data = url;\n    }\n\n    if (!PDFView.loadingBar) {\n      PDFView.loadingBar = new ProgressBar('#loadingBar', {});\n    }\n\n    this.pdfDocument = null;\n    var self = this;\n    self.loading = true;\n    PDFJS.getDocument(parameters).then(\n      function getDocumentCallback(pdfDocument) {\n        self.load(pdfDocument, scale);\n        self.loading = false;\n      },\n      function getDocumentError(message, exception) {\n        if (exception && exception.name === 'PasswordException') {\n          if (exception.code === 'needpassword') {\n            var promptString = mozL10n.get('request_password', null,\n                                      'PDF is protected by a password:');\n            password = prompt(promptString);\n            if (password && password.length > 0) {\n              return PDFView.open(url, scale, password);\n            }\n          }\n        }\n\n        var loadingErrorMessage = mozL10n.get('loading_error', null,\n          'An error occurred while loading the PDF.');\n\n        if (exception && exception.name === 'InvalidPDFException') {\n          // change error message also for other builds\n          var loadingErrorMessage = mozL10n.get('invalid_file_error', null,\n                                        'Invalid or corrupted PDF file.');\n        }\n\n        if (exception && exception.name === 'MissingPDFException') {\n          // special message for missing PDF's\n          var loadingErrorMessage = mozL10n.get('missing_file_error', null,\n                                        'Missing PDF file.');\n\n        }\n\n        var loadingIndicator = document.getElementById('loading');\n        loadingIndicator.textContent = mozL10n.get('loading_error_indicator',\n          null, 'Error');\n        var moreInfo = {\n          message: message\n        };\n        self.error(loadingErrorMessage, moreInfo);\n        self.loading = false;\n      },\n      function getDocumentProgress(progressData) {\n        self.progress(progressData.loaded / progressData.total);\n      }\n    );\n  },\n\n  download: function pdfViewDownload() {\n    function noData() {\n      FirefoxCom.request('download', { originalUrl: url });\n    }\n    var url = this.url.split('#')[0];\n    url += '#pdfjs.action=download';\n    window.open(url, '_parent');\n  },\n\n  fallback: function pdfViewFallback() {\n    return;\n  },\n\n  navigateTo: function pdfViewNavigateTo(dest) {\n    if (typeof dest === 'string')\n      dest = this.destinations[dest];\n    if (!(dest instanceof Array))\n      return; // invalid destination\n    // dest array looks like that: <page-ref> </XYZ|FitXXX> <args..>\n    var destRef = dest[0];\n    var pageNumber = destRef instanceof Object ?\n      this.pagesRefMap[destRef.num + ' ' + destRef.gen + ' R'] : (destRef + 1);\n    if (pageNumber > this.pages.length)\n      pageNumber = this.pages.length;\n    if (pageNumber) {\n      this.page = pageNumber;\n      var currentPage = this.pages[pageNumber - 1];\n      if (!this.isFullscreen) { // Avoid breaking fullscreen mode.\n        currentPage.scrollIntoView(dest);\n      }\n    }\n  },\n\n  getDestinationHash: function pdfViewGetDestinationHash(dest) {\n    if (typeof dest === 'string')\n      return PDFView.getAnchorUrl('#' + escape(dest));\n    if (dest instanceof Array) {\n      var destRef = dest[0]; // see navigateTo method for dest format\n      var pageNumber = destRef instanceof Object ?\n        this.pagesRefMap[destRef.num + ' ' + destRef.gen + ' R'] :\n        (destRef + 1);\n      if (pageNumber) {\n        var pdfOpenParams = PDFView.getAnchorUrl('#page=' + pageNumber);\n        var destKind = dest[1];\n        if (typeof destKind === 'object' && 'name' in destKind &&\n            destKind.name == 'XYZ') {\n          var scale = (dest[4] || this.currentScale);\n          pdfOpenParams += '&zoom=' + (scale * 100);\n          if (dest[2] || dest[3]) {\n            pdfOpenParams += ',' + (dest[2] || 0) + ',' + (dest[3] || 0);\n          }\n        }\n        return pdfOpenParams;\n      }\n    }\n    return '';\n  },\n\n  /**\n   * For the firefox extension we prefix the full url on anchor links so they\n   * don't come up as resource:// urls and so open in new tab/window works.\n   * @param {String} anchor The anchor hash include the #.\n   */\n  getAnchorUrl: function getAnchorUrl(anchor) {\n    return anchor;\n  },\n\n  /**\n   * Returns scale factor for the canvas. It makes sense for the HiDPI displays.\n   * @return {Object} The object with horizontal (sx) and vertical (sy)\n                      scales. The scaled property is set to false if scaling is\n                      not required, true otherwise.\n   */\n  getOutputScale: function pdfViewGetOutputDPI() {\n    var pixelRatio = 'devicePixelRatio' in window ? window.devicePixelRatio : 1;\n    return {\n      sx: pixelRatio,\n      sy: pixelRatio,\n      scaled: pixelRatio != 1\n    };\n  },\n\n  /**\n   * Show the error box.\n   * @param {String} message A message that is human readable.\n   * @param {Object} moreInfo (optional) Further information about the error\n   *                            that is more technical.  Should have a 'message'\n   *                            and optionally a 'stack' property.\n   */\n  error: function pdfViewError(message, moreInfo) {\n    var moreInfoText = mozL10n.get('error_version_info',\n      {version: PDFJS.version || '?', build: PDFJS.build || '?'},\n      'PDF.js v{{version}} (build: {{build}})') + '\\n';\n    if (moreInfo) {\n      moreInfoText +=\n        mozL10n.get('error_message', {message: moreInfo.message},\n        'Message: {{message}}');\n      if (moreInfo.stack) {\n        moreInfoText += '\\n' +\n          mozL10n.get('error_stack', {stack: moreInfo.stack},\n          'Stack: {{stack}}');\n      } else {\n        if (moreInfo.filename) {\n          moreInfoText += '\\n' +\n            mozL10n.get('error_file', {file: moreInfo.filename},\n            'File: {{file}}');\n        }\n        if (moreInfo.lineNumber) {\n          moreInfoText += '\\n' +\n            mozL10n.get('error_line', {line: moreInfo.lineNumber},\n            'Line: {{line}}');\n        }\n      }\n    }\n\n    var loadingBox = document.getElementById('loadingBox');\n    loadingBox.setAttribute('hidden', 'true');\n\n    var errorWrapper = document.getElementById('errorWrapper');\n    errorWrapper.removeAttribute('hidden');\n\n    var errorMessage = document.getElementById('errorMessage');\n    errorMessage.textContent = message;\n\n    var closeButton = document.getElementById('errorClose');\n    closeButton.onclick = function() {\n      errorWrapper.setAttribute('hidden', 'true');\n    };\n\n    var errorMoreInfo = document.getElementById('errorMoreInfo');\n    var moreInfoButton = document.getElementById('errorShowMore');\n    var lessInfoButton = document.getElementById('errorShowLess');\n    moreInfoButton.onclick = function() {\n      errorMoreInfo.removeAttribute('hidden');\n      moreInfoButton.setAttribute('hidden', 'true');\n      lessInfoButton.removeAttribute('hidden');\n    };\n    lessInfoButton.onclick = function() {\n      errorMoreInfo.setAttribute('hidden', 'true');\n      moreInfoButton.removeAttribute('hidden');\n      lessInfoButton.setAttribute('hidden', 'true');\n    };\n    moreInfoButton.removeAttribute('hidden');\n    lessInfoButton.setAttribute('hidden', 'true');\n    errorMoreInfo.value = moreInfoText;\n\n    errorMoreInfo.rows = moreInfoText.split('\\n').length - 1;\n  },\n\n  progress: function pdfViewProgress(level) {\n    var percent = Math.round(level * 100);\n    PDFView.loadingBar.percent = percent;\n  },\n\n  load: function pdfViewLoad(pdfDocument, scale) {\n    function bindOnAfterDraw(pageView, thumbnailView) {\n      // when page is painted, using the image as thumbnail base\n      pageView.onAfterDraw = function pdfViewLoadOnAfterDraw() {\n        thumbnailView.setImage(pageView.canvas);\n      };\n    }\n\n    this.pdfDocument = pdfDocument;\n\n    var errorWrapper = document.getElementById('errorWrapper');\n    errorWrapper.setAttribute('hidden', 'true');\n\n    var loadingBox = document.getElementById('loadingBox');\n    loadingBox.setAttribute('hidden', 'true');\n    var loadingIndicator = document.getElementById('loading');\n    loadingIndicator.textContent = '';\n\n    var thumbsView = document.getElementById('thumbnailView');\n    thumbsView.parentNode.scrollTop = 0;\n\n    while (thumbsView.hasChildNodes())\n      thumbsView.removeChild(thumbsView.lastChild);\n\n    if ('_loadingInterval' in thumbsView)\n      clearInterval(thumbsView._loadingInterval);\n\n    var container = document.getElementById('viewer');\n    while (container.hasChildNodes())\n      container.removeChild(container.lastChild);\n\n    var pagesCount = pdfDocument.numPages;\n    var id = pdfDocument.fingerprint;\n    document.getElementById('numPages').textContent =\n      mozL10n.get('page_of', {pageCount: pagesCount}, 'of {{pageCount}}');\n    document.getElementById('pageNumber').max = pagesCount;\n\n    PDFView.documentFingerprint = id;\n    var store = PDFView.store = new Settings(id);\n    var storePromise = store.initializedPromise;\n\n    this.pageRotation = 0;\n\n    var pages = this.pages = [];\n    this.pageText = [];\n    this.startedTextExtraction = false;\n    var pagesRefMap = {};\n    var thumbnails = this.thumbnails = [];\n    var pagePromises = [];\n    for (var i = 1; i <= pagesCount; i++)\n      pagePromises.push(pdfDocument.getPage(i));\n    var self = this;\n    var pagesPromise = PDFJS.Promise.all(pagePromises);\n    pagesPromise.then(function(promisedPages) {\n      for (var i = 1; i <= pagesCount; i++) {\n        var page = promisedPages[i - 1];\n        var pageView = new PageView(container, page, i, scale,\n                                    page.stats, self.navigateTo.bind(self));\n        var thumbnailView = new ThumbnailView(thumbsView, page, i);\n        bindOnAfterDraw(pageView, thumbnailView);\n\n        pages.push(pageView);\n        thumbnails.push(thumbnailView);\n        var pageRef = page.ref;\n        pagesRefMap[pageRef.num + ' ' + pageRef.gen + ' R'] = i;\n      }\n\n      self.pagesRefMap = pagesRefMap;\n\n      // Wait to do this here so all the canvases are setup.\n      if (PDFView.supportsPrinting) {\n        pdfDocument.getJavaScript().then(function(javaScript) {\n          if (javaScript.length) {\n            PDFView.fallback();\n          }\n          // Hack to support auto printing.\n          var regex = /\\bprint\\s*\\(/g;\n          for (var i = 0, ii = javaScript.length; i < ii; i++) {\n            var js = javaScript[i];\n            if (js && regex.test(js)) {\n              setTimeout(function() {\n                window.print();\n              });\n              return;\n            }\n          }\n        });\n      }\n    });\n\n    var destinationsPromise = pdfDocument.getDestinations();\n    destinationsPromise.then(function(destinations) {\n      self.destinations = destinations;\n    });\n\n    // outline and initial view depends on destinations and pagesRefMap\n    var promises = [pagesPromise, destinationsPromise, storePromise,\n                    PDFView.animationStartedPromise];\n    PDFJS.Promise.all(promises).then(function() {\n      pdfDocument.getOutline().then(function(outline) {\n        self.outline = new DocumentOutlineView(outline);\n      });\n\n      var storedHash = null;\n      if (store.get('exists', false)) {\n        var page = store.get('page', '1');\n        var zoom = store.get('zoom', PDFView.currentScale);\n        var left = store.get('scrollLeft', '0');\n        var top = store.get('scrollTop', '0');\n\n        storedHash = 'page=' + page + '&zoom=' + zoom + ',' + left + ',' + top;\n      }\n\n      self.setInitialView(storedHash, scale);\n\n      // Make all navigation keys work on document load,\n      // unless the viewer is embedded in another page.\n      if (window.parent.location === window.location) {\n        PDFView.container.focus();\n      }\n    });\n\n    pdfDocument.getMetadata().then(function(data) {\n      var info = data.info, metadata = data.metadata;\n      self.documentInfo = info;\n      self.metadata = metadata;\n\n      // Provides some basic debug information\n      console.log('PDF ' + pdfDocument.fingerprint + ' [' +\n                  info.PDFFormatVersion + ' ' + (info.Producer || '-') +\n                  ' / ' + (info.Creator || '-') + ']' +\n                  (PDFJS.version ? ' (PDF.js: ' + PDFJS.version + ')' : ''));\n\n      var pdfTitle;\n      if (metadata) {\n        if (metadata.has('dc:title'))\n          pdfTitle = metadata.get('dc:title');\n      }\n\n      if (!pdfTitle && info && info['Title'])\n        pdfTitle = info['Title'];\n\n      if (pdfTitle)\n        self.setTitle(pdfTitle + ' - ' + document.title);\n\n      if (info.IsAcroFormPresent) {\n        // AcroForm/XFA was found\n        PDFView.fallback();\n      }\n    });\n  },\n\n  setInitialView: function pdfViewSetInitialView(storedHash, scale) {\n    // Reset the current scale, as otherwise the page's scale might not get\n    // updated if the zoom level stayed the same.\n    this.currentScale = 0;\n    this.currentScaleValue = null;\n    if (this.initialBookmark) {\n      this.setHash(this.initialBookmark);\n      this.initialBookmark = null;\n    }\n    else if (storedHash)\n      this.setHash(storedHash);\n    else if (scale) {\n      this.parseScale(scale, true);\n      this.page = 1;\n    }\n\n    if (PDFView.currentScale === UNKNOWN_SCALE) {\n      // Scale was not initialized: invalid bookmark or scale was not specified.\n      // Setting the default one.\n      this.parseScale(DEFAULT_SCALE, true);\n    }\n  },\n\n  renderHighestPriority: function pdfViewRenderHighestPriority() {\n    // Pages have a higher priority than thumbnails, so check them first.\n    var visiblePages = this.getVisiblePages();\n    var pageView = this.getHighestPriority(visiblePages, this.pages,\n                                           this.pageViewScroll.down);\n    if (pageView) {\n      this.renderView(pageView, 'page');\n      return;\n    }\n    // No pages needed rendering so check thumbnails.\n    if (this.sidebarOpen) {\n      var visibleThumbs = this.getVisibleThumbs();\n      var thumbView = this.getHighestPriority(visibleThumbs,\n                                              this.thumbnails,\n                                              this.thumbnailViewScroll.down);\n      if (thumbView)\n        this.renderView(thumbView, 'thumbnail');\n    }\n  },\n\n  getHighestPriority: function pdfViewGetHighestPriority(visible, views,\n                                                         scrolledDown) {\n    // The state has changed figure out which page has the highest priority to\n    // render next (if any).\n    // Priority:\n    // 1 visible pages\n    // 2 if last scrolled down page after the visible pages\n    // 2 if last scrolled up page before the visible pages\n    var visibleViews = visible.views;\n\n    var numVisible = visibleViews.length;\n    if (numVisible === 0) {\n      return false;\n    }\n    for (var i = 0; i < numVisible; ++i) {\n      var view = visibleViews[i].view;\n      if (!this.isViewFinished(view))\n        return view;\n    }\n\n    // All the visible views have rendered, try to render next/previous pages.\n    if (scrolledDown) {\n      var nextPageIndex = visible.last.id;\n      // ID's start at 1 so no need to add 1.\n      if (views[nextPageIndex] && !this.isViewFinished(views[nextPageIndex]))\n        return views[nextPageIndex];\n    } else {\n      var previousPageIndex = visible.first.id - 2;\n      if (views[previousPageIndex] &&\n          !this.isViewFinished(views[previousPageIndex]))\n        return views[previousPageIndex];\n    }\n    // Everything that needs to be rendered has been.\n    return false;\n  },\n\n  isViewFinished: function pdfViewNeedsRendering(view) {\n    return view.renderingState === RenderingStates.FINISHED;\n  },\n\n  // Render a page or thumbnail view. This calls the appropriate function based\n  // on the views state. If the view is already rendered it will return false.\n  renderView: function pdfViewRender(view, type) {\n    var state = view.renderingState;\n    switch (state) {\n      case RenderingStates.FINISHED:\n        return false;\n      case RenderingStates.PAUSED:\n        PDFView.highestPriorityPage = type + view.id;\n        view.resume();\n        break;\n      case RenderingStates.RUNNING:\n        PDFView.highestPriorityPage = type + view.id;\n        break;\n      case RenderingStates.INITIAL:\n        PDFView.highestPriorityPage = type + view.id;\n        view.draw(this.renderHighestPriority.bind(this));\n        break;\n    }\n    return true;\n  },\n\n  setHash: function pdfViewSetHash(hash) {\n    if (!hash)\n      return;\n\n    if (hash.indexOf('=') >= 0) {\n      var params = PDFView.parseQueryString(hash);\n      // borrowing syntax from \"Parameters for Opening PDF Files\"\n      if ('nameddest' in params) {\n        PDFView.navigateTo(params.nameddest);\n        return;\n      }\n      if ('page' in params) {\n        var pageNumber = (params.page | 0) || 1;\n        if ('zoom' in params) {\n          var zoomArgs = params.zoom.split(','); // scale,left,top\n          // building destination array\n\n          // If the zoom value, it has to get divided by 100. If it is a string,\n          // it should stay as it is.\n          var zoomArg = zoomArgs[0];\n          var zoomArgNumber = parseFloat(zoomArg);\n          if (zoomArgNumber)\n            zoomArg = zoomArgNumber / 100;\n\n          var dest = [null, {name: 'XYZ'},\n                      zoomArgs.length > 1 ? (zoomArgs[1] | 0) : null,\n                      zoomArgs.length > 2 ? (zoomArgs[2] | 0) : null,\n                      zoomArg];\n          var currentPage = this.pages[pageNumber - 1];\n          currentPage.scrollIntoView(dest);\n        } else {\n          this.page = pageNumber; // simple page\n        }\n      }\n      if ('pagemode' in params) {\n        var toggle = document.getElementById('sidebarToggle');\n        if (params.pagemode === 'thumbs' || params.pagemode === 'bookmarks') {\n          if (!this.sidebarOpen) {\n            toggle.click();\n          }\n          this.switchSidebarView(params.pagemode === 'thumbs' ?\n                                 'thumbs' : 'outline');\n        } else if (params.pagemode === 'none' && this.sidebarOpen) {\n          toggle.click();\n        }\n      }\n    } else if (/^\\d+$/.test(hash)) // page number\n      this.page = hash;\n    else // named destination\n      PDFView.navigateTo(unescape(hash));\n  },\n\n  switchSidebarView: function pdfViewSwitchSidebarView(view) {\n    var thumbsView = document.getElementById('thumbnailView');\n    var outlineView = document.getElementById('outlineView');\n\n    var thumbsButton = document.getElementById('viewThumbnail');\n    var outlineButton = document.getElementById('viewOutline');\n\n    switch (view) {\n      case 'thumbs':\n        var wasOutlineViewVisible = thumbsView.classList.contains('hidden');\n\n        thumbsButton.classList.add('toggled');\n        outlineButton.classList.remove('toggled');\n        thumbsView.classList.remove('hidden');\n        outlineView.classList.add('hidden');\n\n        PDFView.renderHighestPriority();\n\n        if (wasOutlineViewVisible) {\n          // Ensure that the thumbnail of the current page is visible\n          // when switching from the outline view.\n          scrollIntoView(document.getElementById('thumbnailContainer' +\n                                                 this.page));\n        }\n        break;\n\n      case 'outline':\n        thumbsButton.classList.remove('toggled');\n        outlineButton.classList.add('toggled');\n        thumbsView.classList.add('hidden');\n        outlineView.classList.remove('hidden');\n\n        if (outlineButton.getAttribute('disabled'))\n          return;\n        break;\n    }\n  },\n\n  getVisiblePages: function pdfViewGetVisiblePages() {\n    return this.getVisibleElements(this.container,\n                                   this.pages, true);\n  },\n\n  getVisibleThumbs: function pdfViewGetVisibleThumbs() {\n    return this.getVisibleElements(this.thumbnailContainer,\n                                   this.thumbnails);\n  },\n\n  // Generic helper to find out what elements are visible within a scroll pane.\n  getVisibleElements: function pdfViewGetVisibleElements(\n      scrollEl, views, sortByVisibility) {\n    var currentHeight = 0, view;\n    var top = scrollEl.scrollTop;\n\n    for (var i = 1, ii = views.length; i <= ii; ++i) {\n      view = views[i - 1];\n      currentHeight = view.el.offsetTop + view.el.clientTop;\n      if (currentHeight + view.el.clientHeight > top)\n        break;\n      currentHeight += view.el.clientHeight;\n    }\n\n    var visible = [];\n\n    // Algorithm broken in fullscreen mode\n    if (this.isFullscreen) {\n      var currentPage = this.pages[this.page - 1];\n      visible.push({\n        id: currentPage.id,\n        view: currentPage\n      });\n\n      return { first: currentPage, last: currentPage, views: visible};\n    }\n\n    var bottom = top + scrollEl.clientHeight;\n    var nextHeight, hidden, percent, viewHeight;\n    for (; i <= ii && currentHeight < bottom; ++i) {\n      view = views[i - 1];\n      viewHeight = view.el.clientHeight;\n      currentHeight = view.el.offsetTop + view.el.clientTop;\n      nextHeight = currentHeight + viewHeight;\n      hidden = Math.max(0, top - currentHeight) +\n               Math.max(0, nextHeight - bottom);\n      percent = Math.floor((viewHeight - hidden) * 100.0 / viewHeight);\n      visible.push({ id: view.id, y: currentHeight,\n                     view: view, percent: percent });\n      currentHeight = nextHeight;\n    }\n\n    var first = visible[0];\n    var last = visible[visible.length - 1];\n\n    if (sortByVisibility) {\n      visible.sort(function(a, b) {\n        var pc = a.percent - b.percent;\n        if (Math.abs(pc) > 0.001)\n          return -pc;\n\n        return a.id - b.id; // ensure stability\n      });\n    }\n\n    return {first: first, last: last, views: visible};\n  },\n\n  // Helper function to parse query string (e.g. ?param1=value&parm2=...).\n  parseQueryString: function pdfViewParseQueryString(query) {\n    var parts = query.split('&');\n    var params = {};\n    for (var i = 0, ii = parts.length; i < parts.length; ++i) {\n      var param = parts[i].split('=');\n      var key = param[0];\n      var value = param.length > 1 ? param[1] : null;\n      params[unescape(key)] = unescape(value);\n    }\n    return params;\n  },\n\n  beforePrint: function pdfViewSetupBeforePrint() {\n    if (!this.supportsPrinting) {\n      var printMessage = mozL10n.get('printing_not_supported', null,\n          'Warning: Printing is not fully supported by this browser.');\n      this.error(printMessage);\n      return;\n    }\n    var body = document.querySelector('body');\n    body.setAttribute('data-mozPrintCallback', true);\n    for (var i = 0, ii = this.pages.length; i < ii; ++i) {\n      this.pages[i].beforePrint();\n    }\n  },\n\n  afterPrint: function pdfViewSetupAfterPrint() {\n    var div = document.getElementById('printContainer');\n    while (div.hasChildNodes())\n      div.removeChild(div.lastChild);\n  },\n\n  fullscreen: function pdfViewFullscreen() {\n    var isFullscreen = document.fullscreenElement || document.mozFullScreen ||\n        document.webkitIsFullScreen;\n\n    if (isFullscreen) {\n      return false;\n    }\n\n    var wrapper = document.getElementById('viewerContainer');\n    if (document.documentElement.requestFullscreen) {\n      wrapper.requestFullscreen();\n    } else if (document.documentElement.mozRequestFullScreen) {\n      wrapper.mozRequestFullScreen();\n    } else if (document.documentElement.webkitRequestFullScreen) {\n      wrapper.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);\n    } else {\n      return false;\n    }\n\n    this.isFullscreen = true;\n    var currentPage = this.pages[this.page - 1];\n    this.previousScale = this.currentScaleValue;\n    this.parseScale('page-fit', true);\n\n    // Wait for fullscreen to take effect\n    setTimeout(function() {\n      currentPage.scrollIntoView();\n    }, 0);\n\n    this.showPresentationControls();\n    return true;\n  },\n\n  exitFullscreen: function pdfViewExitFullscreen() {\n    this.isFullscreen = false;\n    this.parseScale(this.previousScale);\n    this.page = this.page;\n    this.clearMouseScrollState();\n    this.hidePresentationControls();\n\n    // Ensure that the thumbnail of the current page is visible\n    // when exiting fullscreen mode.\n    scrollIntoView(document.getElementById('thumbnailContainer' + this.page));\n  },\n\n  showPresentationControls: function pdfViewShowPresentationControls() {\n    var DELAY_BEFORE_HIDING_CONTROLS = 3000;\n    var wrapper = document.getElementById('viewerContainer');\n    if (this.presentationControlsTimeout) {\n      clearTimeout(this.presentationControlsTimeout);\n    } else {\n      wrapper.classList.add('presentationControls');\n    }\n    this.presentationControlsTimeout = setTimeout(function hideControls() {\n      wrapper.classList.remove('presentationControls');\n      delete PDFView.presentationControlsTimeout;\n    }, DELAY_BEFORE_HIDING_CONTROLS);\n  },\n\n  hidePresentationControls: function pdfViewShowPresentationControls() {\n    if (!this.presentationControlsTimeout) {\n      return;\n    }\n    clearTimeout(this.presentationControlsTimeout);\n    delete this.presentationControlsTimeout;\n\n    var wrapper = document.getElementById('viewerContainer');\n    wrapper.classList.remove('presentationControls');\n  },\n\n  rotatePages: function pdfViewPageRotation(delta) {\n\n    this.pageRotation = (this.pageRotation + 360 + delta) % 360;\n\n    for (var i = 0, l = this.pages.length; i < l; i++) {\n      var page = this.pages[i];\n      page.update(page.scale, this.pageRotation);\n    }\n\n    for (var i = 0, l = this.thumbnails.length; i < l; i++) {\n      var thumb = this.thumbnails[i];\n      thumb.updateRotation(this.pageRotation);\n    }\n\n    var currentPage = this.pages[this.page - 1];\n\n    this.parseScale(this.currentScaleValue, true);\n\n    this.renderHighestPriority();\n\n    // Wait for fullscreen to take effect\n    setTimeout(function() {\n      currentPage.scrollIntoView();\n    }, 0);\n  },\n\n  /**\n   * This function flips the page in presentation mode if the user scrolls up\n   * or down with large enough motion and prevents page flipping too often.\n   *\n   * @this {PDFView}\n   * @param {number} mouseScrollDelta The delta value from the mouse event.\n   */\n  mouseScroll: function pdfViewMouseScroll(mouseScrollDelta) {\n    var MOUSE_SCROLL_COOLDOWN_TIME = 50;\n\n    var currentTime = (new Date()).getTime();\n    var storedTime = this.mouseScrollTimeStamp;\n\n    // In case one page has already been flipped there is a cooldown time\n    // which has to expire before next page can be scrolled on to.\n    if (currentTime > storedTime &&\n        currentTime - storedTime < MOUSE_SCROLL_COOLDOWN_TIME)\n      return;\n\n    // In case the user decides to scroll to the opposite direction than before\n    // clear the accumulated delta.\n    if ((this.mouseScrollDelta > 0 && mouseScrollDelta < 0) ||\n        (this.mouseScrollDelta < 0 && mouseScrollDelta > 0))\n      this.clearMouseScrollState();\n\n    this.mouseScrollDelta += mouseScrollDelta;\n\n    var PAGE_FLIP_THRESHOLD = 120;\n    if (Math.abs(this.mouseScrollDelta) >= PAGE_FLIP_THRESHOLD) {\n\n      var PageFlipDirection = {\n        UP: -1,\n        DOWN: 1\n      };\n\n      // In fullscreen mode scroll one page at a time.\n      var pageFlipDirection = (this.mouseScrollDelta > 0) ?\n                                PageFlipDirection.UP :\n                                PageFlipDirection.DOWN;\n      this.clearMouseScrollState();\n      var currentPage = this.page;\n\n      // In case we are already on the first or the last page there is no need\n      // to do anything.\n      if ((currentPage == 1 && pageFlipDirection == PageFlipDirection.UP) ||\n          (currentPage == this.pages.length &&\n           pageFlipDirection == PageFlipDirection.DOWN))\n        return;\n\n      this.page += pageFlipDirection;\n      this.mouseScrollTimeStamp = currentTime;\n    }\n  },\n\n  /**\n   * This function clears the member attributes used with mouse scrolling in\n   * presentation mode.\n   *\n   * @this {PDFView}\n   */\n  clearMouseScrollState: function pdfViewClearMouseScrollState() {\n    this.mouseScrollTimeStamp = 0;\n    this.mouseScrollDelta = 0;\n  }\n};\n\nvar PageView = function pageView(container, pdfPage, id, scale,\n                                 stats, navigateTo) {\n  this.id = id;\n  this.pdfPage = pdfPage;\n\n  this.rotation = 0;\n  this.scale = scale || 1.0;\n  this.viewport = this.pdfPage.getViewport(this.scale, this.pdfPage.rotate);\n\n  this.renderingState = RenderingStates.INITIAL;\n  this.resume = null;\n\n  this.textContent = null;\n  this.textLayer = null;\n\n  var anchor = document.createElement('a');\n  anchor.name = '' + this.id;\n\n  var div = this.el = document.createElement('div');\n  div.id = 'pageContainer' + this.id;\n  div.className = 'page';\n  div.style.width = Math.floor(this.viewport.width) + 'px';\n  div.style.height = Math.floor(this.viewport.height) + 'px';\n\n  container.appendChild(anchor);\n  container.appendChild(div);\n\n  this.destroy = function pageViewDestroy() {\n    this.update();\n    this.pdfPage.destroy();\n  };\n\n  this.update = function pageViewUpdate(scale, rotation) {\n    this.renderingState = RenderingStates.INITIAL;\n    this.resume = null;\n\n    if (typeof rotation !== 'undefined') {\n      this.rotation = rotation;\n    }\n\n    this.scale = scale || this.scale;\n\n    var totalRotation = (this.rotation + this.pdfPage.rotate) % 360;\n    var viewport = this.pdfPage.getViewport(this.scale, totalRotation);\n\n    this.viewport = viewport;\n    div.style.width = Math.floor(viewport.width) + 'px';\n    div.style.height = Math.floor(viewport.height) + 'px';\n\n    while (div.hasChildNodes())\n      div.removeChild(div.lastChild);\n    div.removeAttribute('data-loaded');\n\n    delete this.canvas;\n\n    this.loadingIconDiv = document.createElement('div');\n    this.loadingIconDiv.className = 'loadingIcon';\n    div.appendChild(this.loadingIconDiv);\n  };\n\n  Object.defineProperty(this, 'width', {\n    get: function PageView_getWidth() {\n      return this.viewport.width;\n    },\n    enumerable: true\n  });\n\n  Object.defineProperty(this, 'height', {\n    get: function PageView_getHeight() {\n      return this.viewport.height;\n    },\n    enumerable: true\n  });\n\n  function setupAnnotations(pdfPage, viewport) {\n    function bindLink(link, dest) {\n      link.href = PDFView.getDestinationHash(dest);\n      link.onclick = function pageViewSetupLinksOnclick() {\n        if (dest)\n          PDFView.navigateTo(dest);\n        return false;\n      };\n    }\n    function createElementWithStyle(tagName, item, rect) {\n      if (!rect) {\n        rect = viewport.convertToViewportRectangle(item.rect);\n        rect = PDFJS.Util.normalizeRect(rect);\n      }\n      var element = document.createElement(tagName);\n      element.style.left = Math.floor(rect[0]) + 'px';\n      element.style.top = Math.floor(rect[1]) + 'px';\n      element.style.width = Math.ceil(rect[2] - rect[0]) + 'px';\n      element.style.height = Math.ceil(rect[3] - rect[1]) + 'px';\n      return element;\n    }\n    function createTextAnnotation(item) {\n      var container = document.createElement('section');\n      container.className = 'annotText';\n\n      var rect = viewport.convertToViewportRectangle(item.rect);\n      rect = PDFJS.Util.normalizeRect(rect);\n      // sanity check because of OOo-generated PDFs\n      if ((rect[3] - rect[1]) < ANNOT_MIN_SIZE) {\n        rect[3] = rect[1] + ANNOT_MIN_SIZE;\n      }\n      if ((rect[2] - rect[0]) < ANNOT_MIN_SIZE) {\n        rect[2] = rect[0] + (rect[3] - rect[1]); // make it square\n      }\n      var image = createElementWithStyle('img', item, rect);\n      var iconName = item.name;\n      image.src = IMAGE_DIR + 'annotation-' +\n        iconName.toLowerCase() + '.svg';\n      image.alt = mozL10n.get('text_annotation_type', {type: iconName},\n        '[{{type}} Annotation]');\n      var content = document.createElement('div');\n      content.setAttribute('hidden', true);\n      var title = document.createElement('h1');\n      var text = document.createElement('p');\n      content.style.left = Math.floor(rect[2]) + 'px';\n      content.style.top = Math.floor(rect[1]) + 'px';\n      title.textContent = item.title;\n\n      if (!item.content && !item.title) {\n        content.setAttribute('hidden', true);\n      } else {\n        var e = document.createElement('span');\n        var lines = item.content.split(/(?:\\r\\n?|\\n)/);\n        for (var i = 0, ii = lines.length; i < ii; ++i) {\n          var line = lines[i];\n          e.appendChild(document.createTextNode(line));\n          if (i < (ii - 1))\n            e.appendChild(document.createElement('br'));\n        }\n        text.appendChild(e);\n        image.addEventListener('mouseover', function annotationImageOver() {\n           content.removeAttribute('hidden');\n        }, false);\n\n        image.addEventListener('mouseout', function annotationImageOut() {\n           content.setAttribute('hidden', true);\n        }, false);\n      }\n\n      content.appendChild(title);\n      content.appendChild(text);\n      container.appendChild(image);\n      container.appendChild(content);\n\n      return container;\n    }\n\n    pdfPage.getAnnotations().then(function(items) {\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n        switch (item.type) {\n          case 'Link':\n            var link = createElementWithStyle('a', item);\n            link.href = item.url || '';\n            if (!item.url)\n              bindLink(link, ('dest' in item) ? item.dest : null);\n            div.appendChild(link);\n            break;\n          case 'Text':\n            var textAnnotation = createTextAnnotation(item);\n            if (textAnnotation)\n              div.appendChild(textAnnotation);\n            break;\n        }\n      }\n    });\n  }\n\n  this.getPagePoint = function pageViewGetPagePoint(x, y) {\n    return this.viewport.convertToPdfPoint(x, y);\n  };\n\n  this.scrollIntoView = function pageViewScrollIntoView(dest) {\n      if (!dest) {\n        scrollIntoView(div);\n        return;\n      }\n\n      var x = 0, y = 0;\n      var width = 0, height = 0, widthScale, heightScale;\n      var scale = 0;\n      switch (dest[1].name) {\n        case 'XYZ':\n          x = dest[2];\n          y = dest[3];\n          scale = dest[4];\n          // If x and/or y coordinates are not supplied, default to\n          // _top_ left of the page (not the obvious bottom left,\n          // since aligning the bottom of the intended page with the\n          // top of the window is rarely helpful).\n          x = x !== null ? x : 0;\n          y = y !== null ? y : this.height / this.scale;\n          break;\n        case 'Fit':\n        case 'FitB':\n          scale = 'page-fit';\n          break;\n        case 'FitH':\n        case 'FitBH':\n          y = dest[2];\n          scale = 'page-width';\n          break;\n        case 'FitV':\n        case 'FitBV':\n          x = dest[2];\n          scale = 'page-height';\n          break;\n        case 'FitR':\n          x = dest[2];\n          y = dest[3];\n          width = dest[4] - x;\n          height = dest[5] - y;\n          widthScale = (this.container.clientWidth - SCROLLBAR_PADDING) /\n            width / CSS_UNITS;\n          heightScale = (this.container.clientHeight - SCROLLBAR_PADDING) /\n            height / CSS_UNITS;\n          scale = Math.min(widthScale, heightScale);\n          break;\n        default:\n          return;\n      }\n\n      if (scale && scale !== PDFView.currentScale)\n        PDFView.parseScale(scale, true, true);\n      else if (PDFView.currentScale === UNKNOWN_SCALE)\n        PDFView.parseScale(DEFAULT_SCALE, true, true);\n\n      var boundingRect = [\n        this.viewport.convertToViewportPoint(x, y),\n        this.viewport.convertToViewportPoint(x + width, y + height)\n      ];\n      setTimeout(function pageViewScrollIntoViewRelayout() {\n        // letting page to re-layout before scrolling\n        var scale = PDFView.currentScale;\n        var x = Math.min(boundingRect[0][0], boundingRect[1][0]);\n        var y = Math.min(boundingRect[0][1], boundingRect[1][1]);\n        var width = Math.abs(boundingRect[0][0] - boundingRect[1][0]);\n        var height = Math.abs(boundingRect[0][1] - boundingRect[1][1]);\n\n        scrollIntoView(div, {left: x, top: y, width: width, height: height});\n      }, 0);\n  };\n\n  this.getTextContent = function pageviewGetTextContent() {\n    if (!this.textContent) {\n      this.textContent = this.pdfPage.getTextContent();\n    }\n    return this.textContent;\n  };\n\n  this.draw = function pageviewDraw(callback) {\n    if (this.renderingState !== RenderingStates.INITIAL) {\n      console.error('Must be in new state before drawing');\n    }\n\n    this.renderingState = RenderingStates.RUNNING;\n\n    var canvas = document.createElement('canvas');\n    canvas.id = 'page' + this.id;\n    canvas.mozOpaque = true;\n    div.appendChild(canvas);\n    this.canvas = canvas;\n\n    var textLayerDiv = null;\n    if (!PDFJS.disableTextLayer) {\n      textLayerDiv = document.createElement('div');\n      textLayerDiv.className = 'textLayer';\n      div.appendChild(textLayerDiv);\n    }\n    var textLayer = this.textLayer =\n          textLayerDiv ? new TextLayerBuilder(textLayerDiv, this.id - 1) : null;\n\n    var scale = this.scale, viewport = this.viewport;\n    var outputScale = PDFView.getOutputScale();\n    canvas.width = Math.floor(viewport.width) * outputScale.sx;\n    canvas.height = Math.floor(viewport.height) * outputScale.sy;\n\n    if (outputScale.scaled) {\n      var cssScale = 'scale(' + (1 / outputScale.sx) + ', ' +\n                                (1 / outputScale.sy) + ')';\n      CustomStyle.setProp('transform' , canvas, cssScale);\n      CustomStyle.setProp('transformOrigin' , canvas, '0% 0%');\n      if (textLayerDiv) {\n        CustomStyle.setProp('transform' , textLayerDiv, cssScale);\n        CustomStyle.setProp('transformOrigin' , textLayerDiv, '0% 0%');\n      }\n    }\n\n    var ctx = canvas.getContext('2d');\n    // TODO(mack): use data attributes to store these\n    ctx._scaleX = outputScale.sx;\n    ctx._scaleY = outputScale.sy;\n    ctx.save();\n    ctx.fillStyle = 'rgb(255, 255, 255)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.restore();\n    if (outputScale.scaled) {\n      ctx.scale(outputScale.sx, outputScale.sy);\n    }\n\n    // Rendering area\n\n    var self = this;\n    var renderingWasReset = false;\n    function pageViewDrawCallback(error) {\n      if (renderingWasReset) {\n        return;\n      }\n\n      self.renderingState = RenderingStates.FINISHED;\n\n      if (self.loadingIconDiv) {\n        div.removeChild(self.loadingIconDiv);\n        delete self.loadingIconDiv;\n      }\n\n      if (error) {\n        PDFView.error(mozL10n.get('rendering_error', null,\n          'An error occurred while rendering the page.'), error);\n      }\n\n      self.stats = pdfPage.stats;\n      self.updateStats();\n      if (self.onAfterDraw)\n        self.onAfterDraw();\n\n      cache.push(self);\n      callback();\n    }\n\n    var renderContext = {\n      canvasContext: ctx,\n      viewport: this.viewport,\n      textLayer: textLayer,\n      continueCallback: function pdfViewcContinueCallback(cont) {\n        if (self.renderingState === RenderingStates.INITIAL) {\n          // The page update() was called, we just need to abort any rendering.\n          renderingWasReset = true;\n          return;\n        }\n\n        if (PDFView.highestPriorityPage !== 'page' + self.id) {\n          self.renderingState = RenderingStates.PAUSED;\n          self.resume = function resumeCallback() {\n            self.renderingState = RenderingStates.RUNNING;\n            cont();\n          };\n          return;\n        }\n        cont();\n      }\n    };\n    this.pdfPage.render(renderContext).then(\n      function pdfPageRenderCallback() {\n        pageViewDrawCallback(null);\n      },\n      function pdfPageRenderError(error) {\n        pageViewDrawCallback(error);\n      }\n    );\n\n    if (textLayer) {\n      this.getTextContent().then(\n        function textContentResolved(textContent) {\n          textLayer.setTextContent(textContent);\n        }\n      );\n    }\n\n    setupAnnotations(this.pdfPage, this.viewport);\n    div.setAttribute('data-loaded', true);\n  };\n\n  this.beforePrint = function pageViewBeforePrint() {\n    var pdfPage = this.pdfPage;\n    var viewport = pdfPage.getViewport(1);\n    // Use the same hack we use for high dpi displays for printing to get better\n    // output until bug 811002 is fixed in FF.\n    var PRINT_OUTPUT_SCALE = 2;\n    var canvas = this.canvas = document.createElement('canvas');\n    canvas.width = Math.floor(viewport.width) * PRINT_OUTPUT_SCALE;\n    canvas.height = Math.floor(viewport.height) * PRINT_OUTPUT_SCALE;\n    canvas.style.width = (PRINT_OUTPUT_SCALE * viewport.width) + 'pt';\n    canvas.style.height = (PRINT_OUTPUT_SCALE * viewport.height) + 'pt';\n    var cssScale = 'scale(' + (1 / PRINT_OUTPUT_SCALE) + ', ' +\n                              (1 / PRINT_OUTPUT_SCALE) + ')';\n    CustomStyle.setProp('transform' , canvas, cssScale);\n    CustomStyle.setProp('transformOrigin' , canvas, '0% 0%');\n\n    var printContainer = document.getElementById('printContainer');\n    printContainer.appendChild(canvas);\n\n    var self = this;\n    canvas.mozPrintCallback = function(obj) {\n      var ctx = obj.context;\n\n      ctx.save();\n      ctx.fillStyle = 'rgb(255, 255, 255)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.restore();\n      ctx.scale(PRINT_OUTPUT_SCALE, PRINT_OUTPUT_SCALE);\n\n      var renderContext = {\n        canvasContext: ctx,\n        viewport: viewport\n      };\n\n      pdfPage.render(renderContext).then(function() {\n        // Tell the printEngine that rendering this canvas/page has finished.\n        obj.done();\n        self.pdfPage.destroy();\n      }, function(error) {\n        console.error(error);\n        // Tell the printEngine that rendering this canvas/page has failed.\n        // This will make the print proces stop.\n        if ('abort' in obj)\n          obj.abort();\n        else\n          obj.done();\n        self.pdfPage.destroy();\n      });\n    };\n  };\n\n  this.updateStats = function pageViewUpdateStats() {\n    if (PDFJS.pdfBug && Stats.enabled) {\n      var stats = this.stats;\n      Stats.add(this.id, stats);\n    }\n  };\n};\n\nvar ThumbnailView = function thumbnailView(container, pdfPage, id) {\n  var anchor = document.createElement('a');\n  anchor.href = PDFView.getAnchorUrl('#page=' + id);\n  anchor.title = mozL10n.get('thumb_page_title', {page: id}, 'Page {{page}}');\n  anchor.onclick = function stopNavigation() {\n    PDFView.page = id;\n    return false;\n  };\n\n  var rotation = 0;\n  var totalRotation = (rotation + pdfPage.rotate) % 360;\n  var viewport = pdfPage.getViewport(1, totalRotation);\n  var pageWidth = this.width = viewport.width;\n  var pageHeight = this.height = viewport.height;\n  var pageRatio = pageWidth / pageHeight;\n  this.id = id;\n\n  var canvasWidth = 98;\n  var canvasHeight = canvasWidth / this.width * this.height;\n  var scaleX = this.scaleX = (canvasWidth / pageWidth);\n  var scaleY = this.scaleY = (canvasHeight / pageHeight);\n\n  var div = this.el = document.createElement('div');\n  div.id = 'thumbnailContainer' + id;\n  div.className = 'thumbnail';\n\n  if (id === 1) {\n    // Highlight the thumbnail of the first page when no page number is\n    // specified (or exists in cache) when the document is loaded.\n    div.classList.add('selected');\n  }\n\n  var ring = document.createElement('div');\n  ring.className = 'thumbnailSelectionRing';\n  ring.style.width = canvasWidth + 'px';\n  ring.style.height = canvasHeight + 'px';\n\n  div.appendChild(ring);\n  anchor.appendChild(div);\n  container.appendChild(anchor);\n\n  this.hasImage = false;\n  this.renderingState = RenderingStates.INITIAL;\n\n  this.updateRotation = function(rot) {\n\n    rotation = rot;\n    totalRotation = (rotation + pdfPage.rotate) % 360;\n    viewport = pdfPage.getViewport(1, totalRotation);\n    pageWidth = this.width = viewport.width;\n    pageHeight = this.height = viewport.height;\n    pageRatio = pageWidth / pageHeight;\n\n    canvasHeight = canvasWidth / this.width * this.height;\n    scaleX = this.scaleX = (canvasWidth / pageWidth);\n    scaleY = this.scaleY = (canvasHeight / pageHeight);\n\n    div.removeAttribute('data-loaded');\n    ring.textContent = '';\n    ring.style.width = canvasWidth + 'px';\n    ring.style.height = canvasHeight + 'px';\n\n    this.hasImage = false;\n    this.renderingState = RenderingStates.INITIAL;\n    this.resume = null;\n  };\n\n  function getPageDrawContext() {\n    var canvas = document.createElement('canvas');\n    canvas.id = 'thumbnail' + id;\n    canvas.mozOpaque = true;\n\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n    canvas.className = 'thumbnailImage';\n    canvas.setAttribute('aria-label', mozL10n.get('thumb_page_canvas',\n      {page: id}, 'Thumbnail of Page {{page}}'));\n\n    div.setAttribute('data-loaded', true);\n\n    ring.appendChild(canvas);\n\n    var ctx = canvas.getContext('2d');\n    ctx.save();\n    ctx.fillStyle = 'rgb(255, 255, 255)';\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n    ctx.restore();\n    return ctx;\n  }\n\n  this.drawingRequired = function thumbnailViewDrawingRequired() {\n    return !this.hasImage;\n  };\n\n  this.draw = function thumbnailViewDraw(callback) {\n    if (this.renderingState !== RenderingStates.INITIAL) {\n      console.error('Must be in new state before drawing');\n    }\n\n    this.renderingState = RenderingStates.RUNNING;\n    if (this.hasImage) {\n      callback();\n      return;\n    }\n\n    var self = this;\n    var ctx = getPageDrawContext();\n    var drawViewport = pdfPage.getViewport(scaleX, totalRotation);\n    var renderContext = {\n      canvasContext: ctx,\n      viewport: drawViewport,\n      continueCallback: function(cont) {\n        if (PDFView.highestPriorityPage !== 'thumbnail' + self.id) {\n          self.renderingState = RenderingStates.PAUSED;\n          self.resume = function() {\n            self.renderingState = RenderingStates.RUNNING;\n            cont();\n          };\n          return;\n        }\n        cont();\n      }\n    };\n    pdfPage.render(renderContext).then(\n      function pdfPageRenderCallback() {\n        self.renderingState = RenderingStates.FINISHED;\n        callback();\n      },\n      function pdfPageRenderError(error) {\n        self.renderingState = RenderingStates.FINISHED;\n        callback();\n      }\n    );\n    this.hasImage = true;\n  };\n\n  this.setImage = function thumbnailViewSetImage(img) {\n    if (this.hasImage || !img)\n      return;\n    this.renderingState = RenderingStates.FINISHED;\n    var ctx = getPageDrawContext();\n    ctx.drawImage(img, 0, 0, img.width, img.height,\n                  0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    this.hasImage = true;\n  };\n};\n\nvar DocumentOutlineView = function documentOutlineView(outline) {\n  var outlineView = document.getElementById('outlineView');\n  while (outlineView.firstChild)\n    outlineView.removeChild(outlineView.firstChild);\n\n  function bindItemLink(domObj, item) {\n    domObj.href = PDFView.getDestinationHash(item.dest);\n    domObj.onclick = function documentOutlineViewOnclick(e) {\n      PDFView.navigateTo(item.dest);\n      return false;\n    };\n  }\n\n  if (!outline) {\n    var noOutline = document.createElement('div');\n    noOutline.classList.add('noOutline');\n    noOutline.textContent = mozL10n.get('no_outline', null,\n      'No Outline Available');\n    outlineView.appendChild(noOutline);\n    return;\n  }\n\n  var queue = [{parent: outlineView, items: outline}];\n  while (queue.length > 0) {\n    var levelData = queue.shift();\n    var i, n = levelData.items.length;\n    for (i = 0; i < n; i++) {\n      var item = levelData.items[i];\n      var div = document.createElement('div');\n      div.className = 'outlineItem';\n      var a = document.createElement('a');\n      bindItemLink(a, item);\n      a.textContent = item.title;\n      div.appendChild(a);\n\n      if (item.items.length > 0) {\n        var itemsDiv = document.createElement('div');\n        itemsDiv.className = 'outlineItems';\n        div.appendChild(itemsDiv);\n        queue.push({parent: itemsDiv, items: item.items});\n      }\n\n      levelData.parent.appendChild(div);\n    }\n  }\n};\n\n// optimised CSS custom property getter/setter\nvar CustomStyle = (function CustomStyleClosure() {\n\n  // As noted on: http://www.zachstronaut.com/posts/2009/02/17/\n  //              animate-css-transforms-firefox-webkit.html\n  // in some versions of IE9 it is critical that ms appear in this list\n  // before Moz\n  var prefixes = ['ms', 'Moz', 'Webkit', 'O'];\n  var _cache = { };\n\n  function CustomStyle() {\n  }\n\n  CustomStyle.getProp = function get(propName, element) {\n    // check cache only when no element is given\n    if (arguments.length == 1 && typeof _cache[propName] == 'string') {\n      return _cache[propName];\n    }\n\n    element = element || document.documentElement;\n    var style = element.style, prefixed, uPropName;\n\n    // test standard property first\n    if (typeof style[propName] == 'string') {\n      return (_cache[propName] = propName);\n    }\n\n    // capitalize\n    uPropName = propName.charAt(0).toUpperCase() + propName.slice(1);\n\n    // test vendor specific properties\n    for (var i = 0, l = prefixes.length; i < l; i++) {\n      prefixed = prefixes[i] + uPropName;\n      if (typeof style[prefixed] == 'string') {\n        return (_cache[propName] = prefixed);\n      }\n    }\n\n    //if all fails then set to undefined\n    return (_cache[propName] = 'undefined');\n  };\n\n  CustomStyle.setProp = function set(propName, element, str) {\n    var prop = this.getProp(propName);\n    if (prop != 'undefined')\n      element.style[prop] = str;\n  };\n\n  return CustomStyle;\n})();\n\nvar TextLayerBuilder = function textLayerBuilder(textLayerDiv, pageIdx) {\n  var textLayerFrag = document.createDocumentFragment();\n\n  this.textLayerDiv = textLayerDiv;\n  this.layoutDone = false;\n  this.divContentDone = false;\n  this.pageIdx = pageIdx;\n  this.matches = [];\n\n  this.beginLayout = function textLayerBuilderBeginLayout() {\n    this.textDivs = [];\n    this.textLayerQueue = [];\n    this.renderingDone = false;\n  };\n\n  this.endLayout = function textLayerBuilderEndLayout() {\n    this.layoutDone = true;\n    this.insertDivContent();\n  };\n\n  this.renderLayer = function textLayerBuilderRenderLayer() {\n    var self = this;\n    var textDivs = this.textDivs;\n    var bidiTexts = this.textContent.bidiTexts;\n    var textLayerDiv = this.textLayerDiv;\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n\n    // No point in rendering so many divs as it'd make the browser unusable\n    // even after the divs are rendered\n    var MAX_TEXT_DIVS_TO_RENDER = 100000;\n    if (textDivs.length > MAX_TEXT_DIVS_TO_RENDER)\n      return;\n\n    for (var i = 0, ii = textDivs.length; i < ii; i++) {\n      var textDiv = textDivs[i];\n      if ('isWhitespace' in textDiv.dataset) {\n        continue;\n      }\n      textLayerFrag.appendChild(textDiv);\n\n      ctx.font = textDiv.style.fontSize + ' ' + textDiv.style.fontFamily;\n      var width = ctx.measureText(textDiv.textContent).width;\n\n      if (width > 0) {\n        var textScale = textDiv.dataset.canvasWidth / width;\n\n        var transform = 'scale(' + textScale + ', 1)';\n        if (bidiTexts[i].dir === 'ttb') {\n          transform = 'rotate(90deg) ' + transform;\n        }\n        CustomStyle.setProp('transform' , textDiv, transform);\n        CustomStyle.setProp('transformOrigin' , textDiv, '0% 0%');\n\n        textLayerDiv.appendChild(textDiv);\n      }\n    }\n\n    this.renderingDone = true;\n    this.updateMatches();\n\n    textLayerDiv.appendChild(textLayerFrag);\n  };\n\n  this.setupRenderLayoutTimer = function textLayerSetupRenderLayoutTimer() {\n    // Schedule renderLayout() if user has been scrolling, otherwise\n    // run it right away\n    var RENDER_DELAY = 200; // in ms\n    var self = this;\n    if (Date.now() - PDFView.lastScroll > RENDER_DELAY) {\n      // Render right away\n      this.renderLayer();\n    } else {\n      // Schedule\n      if (this.renderTimer)\n        clearTimeout(this.renderTimer);\n      this.renderTimer = setTimeout(function() {\n        self.setupRenderLayoutTimer();\n      }, RENDER_DELAY);\n    }\n  };\n\n  this.appendText = function textLayerBuilderAppendText(geom) {\n    var textDiv = document.createElement('div');\n\n    // vScale and hScale already contain the scaling to pixel units\n    var fontHeight = geom.fontSize * Math.abs(geom.vScale);\n    textDiv.dataset.canvasWidth = geom.canvasWidth * geom.hScale;\n    textDiv.dataset.fontName = geom.fontName;\n\n    textDiv.style.fontSize = fontHeight + 'px';\n    textDiv.style.fontFamily = geom.fontFamily;\n    textDiv.style.left = geom.x + 'px';\n    textDiv.style.top = (geom.y - fontHeight) + 'px';\n\n    // The content of the div is set in the `setTextContent` function.\n\n    this.textDivs.push(textDiv);\n  };\n\n  this.insertDivContent = function textLayerUpdateTextContent() {\n    // Only set the content of the divs once layout has finished, the content\n    // for the divs is available and content is not yet set on the divs.\n    if (!this.layoutDone || this.divContentDone || !this.textContent)\n      return;\n\n    this.divContentDone = true;\n\n    var textDivs = this.textDivs;\n    var bidiTexts = this.textContent.bidiTexts;\n\n    for (var i = 0; i < bidiTexts.length; i++) {\n      var bidiText = bidiTexts[i];\n      var textDiv = textDivs[i];\n      if (!/\\S/.test(bidiText.str)) {\n        textDiv.dataset.isWhitespace = true;\n        continue;\n      }\n\n      textDiv.textContent = bidiText.str;\n      // bidiText.dir may be 'ttb' for vertical texts.\n      textDiv.dir = bidiText.dir === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    this.setupRenderLayoutTimer();\n  };\n\n  this.setTextContent = function textLayerBuilderSetTextContent(textContent) {\n    this.textContent = textContent;\n    this.insertDivContent();\n  };\n\n  this.convertMatches = function textLayerBuilderConvertMatches(matches) {\n    var i = 0;\n    var iIndex = 0;\n    var bidiTexts = this.textContent.bidiTexts;\n    var end = bidiTexts.length - 1;\n    var queryLen = PDFFindController.state.query.length;\n\n    var lastDivIdx = -1;\n    var pos;\n\n    var ret = [];\n\n    // Loop over all the matches.\n    for (var m = 0; m < matches.length; m++) {\n      var matchIdx = matches[m];\n      // # Calculate the begin position.\n\n      // Loop over the divIdxs.\n      while (i !== end && matchIdx >= (iIndex + bidiTexts[i].str.length)) {\n        iIndex += bidiTexts[i].str.length;\n        i++;\n      }\n\n      // TODO: Do proper handling here if something goes wrong.\n      if (i == bidiTexts.length) {\n        console.error('Could not find matching mapping');\n      }\n\n      var match = {\n        begin: {\n          divIdx: i,\n          offset: matchIdx - iIndex\n        }\n      };\n\n      // # Calculate the end position.\n      matchIdx += queryLen;\n\n      // Somewhat same array as above, but use a > instead of >= to get the end\n      // position right.\n      while (i !== end && matchIdx > (iIndex + bidiTexts[i].str.length)) {\n        iIndex += bidiTexts[i].str.length;\n        i++;\n      }\n\n      match.end = {\n        divIdx: i,\n        offset: matchIdx - iIndex\n      };\n      ret.push(match);\n    }\n\n    return ret;\n  };\n\n  this.renderMatches = function textLayerBuilder_renderMatches(matches) {\n    // Early exit if there is nothing to render.\n    if (matches.length === 0) {\n      return;\n    }\n\n    var bidiTexts = this.textContent.bidiTexts;\n    var textDivs = this.textDivs;\n    var prevEnd = null;\n    var isSelectedPage = this.pageIdx === PDFFindController.selected.pageIdx;\n    var selectedMatchIdx = PDFFindController.selected.matchIdx;\n    var highlightAll = PDFFindController.state.highlightAll;\n\n    var infty = {\n      divIdx: -1,\n      offset: undefined\n    };\n\n    function beginText(begin, className) {\n      var divIdx = begin.divIdx;\n      var div = textDivs[divIdx];\n      div.textContent = '';\n\n      var content = bidiTexts[divIdx].str.substring(0, begin.offset);\n      var node = document.createTextNode(content);\n      if (className) {\n        var isSelected = isSelectedPage &&\n                          divIdx === selectedMatchIdx;\n        var span = document.createElement('span');\n        span.className = className + (isSelected ? ' selected' : '');\n        span.appendChild(node);\n        div.appendChild(span);\n        return;\n      }\n      div.appendChild(node);\n    }\n\n    function appendText(from, to, className) {\n      var divIdx = from.divIdx;\n      var div = textDivs[divIdx];\n\n      var content = bidiTexts[divIdx].str.substring(from.offset, to.offset);\n      var node = document.createTextNode(content);\n      if (className) {\n        var span = document.createElement('span');\n        span.className = className;\n        span.appendChild(node);\n        div.appendChild(span);\n        return;\n      }\n      div.appendChild(node);\n    }\n\n    function highlightDiv(divIdx, className) {\n      textDivs[divIdx].className = className;\n    }\n\n    var i0 = selectedMatchIdx, i1 = i0 + 1, i;\n\n    if (highlightAll) {\n      i0 = 0;\n      i1 = matches.length;\n    } else if (!isSelectedPage) {\n      // Not highlighting all and this isn't the selected page, so do nothing.\n      return;\n    }\n\n    for (i = i0; i < i1; i++) {\n      var match = matches[i];\n      var begin = match.begin;\n      var end = match.end;\n\n      var isSelected = isSelectedPage && i === selectedMatchIdx;\n      var highlightSuffix = (isSelected ? ' selected' : '');\n      if (isSelected)\n        scrollIntoView(textDivs[begin.divIdx], {top: -50});\n\n      // Match inside new div.\n      if (!prevEnd || begin.divIdx !== prevEnd.divIdx) {\n        // If there was a previous div, then add the text at the end\n        if (prevEnd !== null) {\n          appendText(prevEnd, infty);\n        }\n        // clears the divs and set the content until the begin point.\n        beginText(begin);\n      } else {\n        appendText(prevEnd, begin);\n      }\n\n      if (begin.divIdx === end.divIdx) {\n        appendText(begin, end, 'highlight' + highlightSuffix);\n      } else {\n        appendText(begin, infty, 'highlight begin' + highlightSuffix);\n        for (var n = begin.divIdx + 1; n < end.divIdx; n++) {\n          highlightDiv(n, 'highlight middle' + highlightSuffix);\n        }\n        beginText(end, 'highlight end' + highlightSuffix);\n      }\n      prevEnd = end;\n    }\n\n    if (prevEnd) {\n      appendText(prevEnd, infty);\n    }\n  };\n\n  this.updateMatches = function textLayerUpdateMatches() {\n    // Only show matches, once all rendering is done.\n    if (!this.renderingDone)\n      return;\n\n    // Clear out all matches.\n    var matches = this.matches;\n    var textDivs = this.textDivs;\n    var bidiTexts = this.textContent.bidiTexts;\n    var clearedUntilDivIdx = -1;\n\n    // Clear out all current matches.\n    for (var i = 0; i < matches.length; i++) {\n      var match = matches[i];\n      var begin = Math.max(clearedUntilDivIdx, match.begin.divIdx);\n      for (var n = begin; n <= match.end.divIdx; n++) {\n        var div = textDivs[n];\n        div.textContent = bidiTexts[n].str;\n        div.className = '';\n      }\n      clearedUntilDivIdx = match.end.divIdx + 1;\n    }\n\n    if (!PDFFindController.active)\n      return;\n\n    // Convert the matches on the page controller into the match format used\n    // for the textLayer.\n    this.matches = matches =\n      this.convertMatches(PDFFindController.pageMatches[this.pageIdx] || []);\n\n    this.renderMatches(this.matches);\n  };\n};\n\ndocument.addEventListener('DOMContentLoaded', function webViewerLoad(evt) {\n  PDFView.initialize();\n  var params = PDFView.parseQueryString(document.location.search.substring(1));\n\n  var file = params.file || DEFAULT_URL;\n\n  if (!window.File || !window.FileReader || !window.FileList || !window.Blob) {\n    document.getElementById('openFile').setAttribute('hidden', 'true');\n  } else {\n    document.getElementById('fileInput').value = null;\n  }\n\n  // Special debugging flags in the hash section of the URL.\n  var hash = document.location.hash.substring(1);\n  var hashParams = PDFView.parseQueryString(hash);\n\n  if ('disableWorker' in hashParams)\n    PDFJS.disableWorker = (hashParams['disableWorker'] === 'true');\n\n  var locale = navigator.language;\n  if ('locale' in hashParams)\n    locale = hashParams['locale'];\n  mozL10n.setLanguage(locale);\n\n  if ('textLayer' in hashParams) {\n    switch (hashParams['textLayer']) {\n      case 'off':\n        PDFJS.disableTextLayer = true;\n        break;\n      case 'visible':\n      case 'shadow':\n      case 'hover':\n        var viewer = document.getElementById('viewer');\n        viewer.classList.add('textLayer-' + hashParams['textLayer']);\n        break;\n    }\n  }\n\n  if ('pdfBug' in hashParams) {\n    PDFJS.pdfBug = true;\n    var pdfBug = hashParams['pdfBug'];\n    var enabled = pdfBug.split(',');\n    PDFBug.enable(enabled);\n    PDFBug.init();\n  }\n\n  if (!PDFView.supportsPrinting) {\n    document.getElementById('print').classList.add('hidden');\n  }\n\n  if (!PDFView.supportsFullscreen) {\n    document.getElementById('fullscreen').classList.add('hidden');\n  }\n\n  if (PDFView.supportsIntegratedFind) {\n    document.querySelector('#viewFind').classList.add('hidden');\n  }\n\n  // Listen for warnings to trigger the fallback UI.  Errors should be caught\n  // and call PDFView.error() so we don't need to listen for those.\n  PDFJS.LogManager.addLogger({\n    warn: function() {\n      PDFView.fallback();\n    }\n  });\n\n  var mainContainer = document.getElementById('mainContainer');\n  var outerContainer = document.getElementById('outerContainer');\n  mainContainer.addEventListener('transitionend', function(e) {\n    if (e.target == mainContainer) {\n      var event = document.createEvent('UIEvents');\n      event.initUIEvent('resize', false, false, window, 0);\n      window.dispatchEvent(event);\n      outerContainer.classList.remove('sidebarMoving');\n    }\n  }, true);\n\n  document.getElementById('sidebarToggle').addEventListener('click',\n    function() {\n      this.classList.toggle('toggled');\n      outerContainer.classList.add('sidebarMoving');\n      outerContainer.classList.toggle('sidebarOpen');\n      PDFView.sidebarOpen = outerContainer.classList.contains('sidebarOpen');\n      PDFView.renderHighestPriority();\n    });\n\n  document.getElementById('viewThumbnail').addEventListener('click',\n    function() {\n      PDFView.switchSidebarView('thumbs');\n    });\n\n  document.getElementById('viewOutline').addEventListener('click',\n    function() {\n      PDFView.switchSidebarView('outline');\n    });\n\n  document.getElementById('previous').addEventListener('click',\n    function() {\n      PDFView.page--;\n    });\n\n  document.getElementById('next').addEventListener('click',\n    function() {\n      PDFView.page++;\n    });\n\n  document.querySelector('.zoomIn').addEventListener('click',\n    function() {\n      PDFView.zoomIn();\n    });\n\n  document.querySelector('.zoomOut').addEventListener('click',\n    function() {\n      PDFView.zoomOut();\n    });\n\n  document.getElementById('fullscreen').addEventListener('click',\n    function() {\n      PDFView.fullscreen();\n    });\n\n  document.getElementById('openFile').addEventListener('click',\n    function() {\n      document.getElementById('fileInput').click();\n    });\n\n  document.getElementById('print').addEventListener('click',\n    function() {\n      window.print();\n    });\n\n  document.getElementById('download').addEventListener('click',\n    function() {\n      PDFView.download();\n    });\n\n  document.getElementById('pageNumber').addEventListener('click',\n    function() {\n      this.select();\n    });\n\n  document.getElementById('pageNumber').addEventListener('change',\n    function() {\n      // Handle the user inputting a floating point number.\n      PDFView.page = (this.value | 0);\n\n      if (this.value !== (this.value | 0).toString()) {\n        this.value = PDFView.page;\n      }\n    });\n\n  document.getElementById('scaleSelect').addEventListener('change',\n    function() {\n      PDFView.parseScale(this.value);\n    });\n\n  document.getElementById('first_page').addEventListener('click',\n    function() {\n      PDFView.page = 1;\n    });\n\n  document.getElementById('last_page').addEventListener('click',\n    function() {\n      PDFView.page = PDFView.pdfDocument.numPages;\n    });\n\n  document.getElementById('page_rotate_ccw').addEventListener('click',\n    function() {\n      PDFView.rotatePages(-90);\n    });\n\n  document.getElementById('page_rotate_cw').addEventListener('click',\n    function() {\n      PDFView.rotatePages(90);\n    });\n\n\n  PDFView.open(file, 0);\n}, true);\n\nfunction updateViewarea() {\n\n  if (!PDFView.initialized)\n    return;\n  var visible = PDFView.getVisiblePages();\n  var visiblePages = visible.views;\n  if (visiblePages.length === 0) {\n    return;\n  }\n\n  PDFView.renderHighestPriority();\n\n  var currentId = PDFView.page;\n  var firstPage = visible.first;\n\n  for (var i = 0, ii = visiblePages.length, stillFullyVisible = false;\n       i < ii; ++i) {\n    var page = visiblePages[i];\n\n    if (page.percent < 100)\n      break;\n\n    if (page.id === PDFView.page) {\n      stillFullyVisible = true;\n      break;\n    }\n  }\n\n  if (!stillFullyVisible) {\n    currentId = visiblePages[0].id;\n  }\n\n  if (!PDFView.isFullscreen) {\n    updateViewarea.inProgress = true; // used in \"set page\"\n    PDFView.page = currentId;\n    updateViewarea.inProgress = false;\n  }\n\n  var currentScale = PDFView.currentScale;\n  var currentScaleValue = PDFView.currentScaleValue;\n  var normalizedScaleValue = currentScaleValue == currentScale ?\n    currentScale * 100 : currentScaleValue;\n\n  var pageNumber = firstPage.id;\n  var pdfOpenParams = '#page=' + pageNumber;\n  pdfOpenParams += '&zoom=' + normalizedScaleValue;\n  var currentPage = PDFView.pages[pageNumber - 1];\n  var topLeft = currentPage.getPagePoint(PDFView.container.scrollLeft,\n    (PDFView.container.scrollTop - firstPage.y));\n  pdfOpenParams += ',' + Math.round(topLeft[0]) + ',' + Math.round(topLeft[1]);\n\n  var store = PDFView.store;\n  store.initializedPromise.then(function() {\n    store.set('exists', true);\n    store.set('page', pageNumber);\n    store.set('zoom', normalizedScaleValue);\n    store.set('scrollLeft', Math.round(topLeft[0]));\n    store.set('scrollTop', Math.round(topLeft[1]));\n  });\n  var href = PDFView.getAnchorUrl(pdfOpenParams);\n  document.getElementById('viewBookmark').href = href;\n}\n\nwindow.addEventListener('resize', function webViewerResize(evt) {\n  if (PDFView.initialized &&\n      (document.getElementById('pageWidthOption').selected ||\n      document.getElementById('pageFitOption').selected ||\n      document.getElementById('pageAutoOption').selected))\n      PDFView.parseScale(document.getElementById('scaleSelect').value);\n  updateViewarea();\n});\n\nwindow.addEventListener('hashchange', function webViewerHashchange(evt) {\n  PDFView.setHash(document.location.hash.substring(1));\n});\n\nwindow.addEventListener('change', function webViewerChange(evt) {\n  var files = evt.target.files;\n  if (!files || files.length === 0)\n    return;\n\n  // Read the local file into a Uint8Array.\n  var fileReader = new FileReader();\n  fileReader.onload = function webViewerChangeFileReaderOnload(evt) {\n    var buffer = evt.target.result;\n    var uint8Array = new Uint8Array(buffer);\n    PDFView.open(uint8Array, 0);\n  };\n\n  var file = files[0];\n  fileReader.readAsArrayBuffer(file);\n  PDFView.setTitleUsingUrl(file.name);\n\n  // URL does not reflect proper document location - hiding some icons.\n  document.getElementById('viewBookmark').setAttribute('hidden', 'true');\n  document.getElementById('download').setAttribute('hidden', 'true');\n}, true);\n\nfunction selectScaleOption(value) {\n  var options = document.getElementById('scaleSelect').options;\n  var predefinedValueFound = false;\n  for (var i = 0; i < options.length; i++) {\n    var option = options[i];\n    if (option.value != value) {\n      option.selected = false;\n      continue;\n    }\n    option.selected = true;\n    predefinedValueFound = true;\n  }\n  return predefinedValueFound;\n}\n\nwindow.addEventListener('localized', function localized(evt) {\n  document.getElementsByTagName('html')[0].dir = mozL10n.getDirection();\n\n  // Adjust the width of the zoom box to fit the content.\n  PDFView.animationStartedPromise.then(\n    function() {\n      var container = document.getElementById('scaleSelectContainer');\n      var select = document.getElementById('scaleSelect');\n      select.setAttribute('style', 'min-width: inherit;');\n      var width = select.clientWidth + 8;\n      select.setAttribute('style', 'min-width: ' + (width + 20) + 'px;');\n      container.setAttribute('style', 'min-width: ' + width + 'px; ' +\n                                      'max-width: ' + width + 'px;');\n  });\n}, true);\n\nwindow.addEventListener('scalechange', function scalechange(evt) {\n  var customScaleOption = document.getElementById('customScaleOption');\n  customScaleOption.selected = false;\n\n  if (!evt.resetAutoSettings &&\n       (document.getElementById('pageWidthOption').selected ||\n        document.getElementById('pageFitOption').selected ||\n        document.getElementById('pageAutoOption').selected)) {\n      updateViewarea();\n      return;\n  }\n\n  var predefinedValueFound = selectScaleOption('' + evt.scale);\n  if (!predefinedValueFound) {\n    customScaleOption.textContent = Math.round(evt.scale * 10000) / 100 + '%';\n    customScaleOption.selected = true;\n  }\n  \n  document.getElementById('zoom_out').disabled = (evt.scale === MIN_SCALE);\n  document.getElementById('zoom_in').disabled = (evt.scale === MAX_SCALE);\n\n  updateViewarea();\n}, true);\n\nwindow.addEventListener('pagechange', function pagechange(evt) {\n  var page = evt.pageNumber;\n  if (PDFView.previousPageNumber !== page) {\n    document.getElementById('pageNumber').value = page;\n    var selected = document.querySelector('.thumbnail.selected');\n    if (selected)\n      selected.classList.remove('selected');\n    var thumbnail = document.getElementById('thumbnailContainer' + page);\n    thumbnail.classList.add('selected');\n    var visibleThumbs = PDFView.getVisibleThumbs();\n    var numVisibleThumbs = visibleThumbs.views.length;\n    // If the thumbnail isn't currently visible scroll it into view.\n    if (numVisibleThumbs > 0) {\n      var first = visibleThumbs.first.id;\n      // Account for only one thumbnail being visible.\n      var last = numVisibleThumbs > 1 ?\n                  visibleThumbs.last.id : first;\n      if (page <= first || page >= last)\n        scrollIntoView(thumbnail);\n    }\n\n  }\n  document.getElementById('previous').disabled = (page <= 1);\n  document.getElementById('next').disabled = (page >= PDFView.pages.length);\n}, true);\n\n// Firefox specific event, so that we can prevent browser from zooming\nwindow.addEventListener('DOMMouseScroll', function(evt) {\n  if (evt.ctrlKey) {\n    evt.preventDefault();\n\n    var ticks = evt.detail;\n    var direction = (ticks > 0) ? 'zoomOut' : 'zoomIn';\n    for (var i = 0, length = Math.abs(ticks); i < length; i++)\n      PDFView[direction]();\n  } else if (PDFView.isFullscreen) {\n    var FIREFOX_DELTA_FACTOR = -40;\n    PDFView.mouseScroll(evt.detail * FIREFOX_DELTA_FACTOR);\n  }\n}, false);\n\nwindow.addEventListener('mousemove', function mousemove(evt) {\n  if (PDFView.isFullscreen) {\n    PDFView.showPresentationControls();\n  }\n}, false);\n\nwindow.addEventListener('mousedown', function mousedown(evt) {\n  if (PDFView.isFullscreen && evt.button === 0) {\n    // Enable clicking of links in fullscreen mode.\n    // Note: Only links that point to the currently loaded PDF document works.\n    var targetHref = evt.target.href;\n    var internalLink = targetHref && (targetHref.replace(/#.*$/, '') ===\n                                      window.location.href.replace(/#.*$/, ''));\n    if (!internalLink) {\n      // Unless an internal link was clicked, advance a page in fullscreen mode.\n      evt.preventDefault();\n      PDFView.page++;\n    }\n  }\n}, false);\n\nwindow.addEventListener('click', function click(evt) {\n  if (PDFView.isFullscreen && evt.button === 0) {\n    // Necessary since preventDefault() in 'mousedown' won't stop\n    // the event propagation in all circumstances.\n    evt.preventDefault();\n  }\n}, false);\n\nwindow.addEventListener('keydown', function keydown(evt) {\n  var handled = false;\n  var cmd = (evt.ctrlKey ? 1 : 0) |\n            (evt.altKey ? 2 : 0) |\n            (evt.shiftKey ? 4 : 0) |\n            (evt.metaKey ? 8 : 0);\n\n  // First, handle the key bindings that are independent whether an input\n  // control is selected or not.\n  if (cmd === 1 || cmd === 8 || cmd === 5 || cmd === 12) {\n    // either CTRL or META key with optional SHIFT.\n    switch (evt.keyCode) {\n      case 70:\n        if (!PDFView.supportsIntegratedFind) {\n          PDFFindBar.toggle();\n          handled = true;\n        }\n        break;\n      case 61: // FF/Mac '='\n      case 107: // FF '+' and '='\n      case 187: // Chrome '+'\n      case 171: // FF with German keyboard\n        PDFView.zoomIn();\n        handled = true;\n        break;\n      case 173: // FF/Mac '-'\n      case 109: // FF '-'\n      case 189: // Chrome '-'\n        PDFView.zoomOut();\n        handled = true;\n        break;\n      case 48: // '0'\n      case 96: // '0' on Numpad of Swedish keyboard\n        PDFView.parseScale(DEFAULT_SCALE, true);\n        handled = false; // keeping it unhandled (to restore page zoom to 100%)\n        break;\n    }\n  }\n\n  // CTRL or META with or without SHIFT.\n  if (cmd == 1 || cmd == 8 || cmd == 5 || cmd == 12) {\n    switch (evt.keyCode) {\n      case 71: // g\n        if (!PDFView.supportsIntegratedFind) {\n          PDFFindBar.dispatchEvent('again', cmd == 5 || cmd == 12);\n          handled = true;\n        }\n        break;\n    }\n  }\n\n  if (handled) {\n    evt.preventDefault();\n    return;\n  }\n\n  // Some shortcuts should not get handled if a control/input element\n  // is selected.\n  var curElement = document.activeElement;\n  if (curElement && (curElement.tagName == 'INPUT' ||\n                     curElement.tagName == 'SELECT')) {\n    return;\n  }\n  var controlsElement = document.getElementById('toolbar');\n  while (curElement) {\n    if (curElement === controlsElement && !PDFView.isFullscreen)\n      return; // ignoring if the 'toolbar' element is focused\n    curElement = curElement.parentNode;\n  }\n\n  if (cmd === 0) { // no control key pressed at all.\n    switch (evt.keyCode) {\n      case 38: // up arrow\n      case 33: // pg up\n      case 8: // backspace\n        if (!PDFView.isFullscreen && PDFView.currentScaleValue !== 'page-fit') {\n          break;\n        }\n        /* in fullscreen mode */\n        /* falls through */\n      case 37: // left arrow\n        // horizontal scrolling using arrow keys\n        if (PDFView.isHorizontalScrollbarEnabled) {\n          break;\n        }\n        /* falls through */\n      case 75: // 'k'\n      case 80: // 'p'\n        PDFView.page--;\n        handled = true;\n        break;\n      case 27: // esc key\n        if (!PDFView.supportsIntegratedFind && PDFFindBar.opened) {\n          PDFFindBar.close();\n          handled = true;\n        }\n        break;\n      case 40: // down arrow\n      case 34: // pg down\n      case 32: // spacebar\n        if (!PDFView.isFullscreen && PDFView.currentScaleValue !== 'page-fit') {\n          break;\n        }\n        /* falls through */\n      case 39: // right arrow\n        // horizontal scrolling using arrow keys\n        if (PDFView.isHorizontalScrollbarEnabled) {\n          break;\n        }\n        /* falls through */\n      case 74: // 'j'\n      case 78: // 'n'\n        PDFView.page++;\n        handled = true;\n        break;\n\n      case 36: // home\n        if (PDFView.isFullscreen) {\n          PDFView.page = 1;\n          handled = true;\n        }\n        break;\n      case 35: // end\n        if (PDFView.isFullscreen) {\n          PDFView.page = PDFView.pdfDocument.numPages;\n          handled = true;\n        }\n        break;\n\n      case 82: // 'r'\n        PDFView.rotatePages(90);\n        break;\n    }\n  }\n\n  if (cmd == 4) { // shift-key\n    switch (evt.keyCode) {\n      case 82: // 'r'\n        PDFView.rotatePages(-90);\n        break;\n    }\n  }\n\n  if (handled) {\n    evt.preventDefault();\n    PDFView.clearMouseScrollState();\n  }\n});\n\nwindow.addEventListener('beforeprint', function beforePrint(evt) {\n  PDFView.beforePrint();\n});\n\nwindow.addEventListener('afterprint', function afterPrint(evt) {\n  PDFView.afterPrint();\n});\n\n(function fullscreenClosure() {\n  function fullscreenChange(e) {\n    var isFullscreen = document.fullscreenElement || document.mozFullScreen ||\n        document.webkitIsFullScreen;\n\n    if (!isFullscreen) {\n      PDFView.exitFullscreen();\n    }\n  }\n\n  window.addEventListener('fullscreenchange', fullscreenChange, false);\n  window.addEventListener('mozfullscreenchange', fullscreenChange, false);\n  window.addEventListener('webkitfullscreenchange', fullscreenChange, false);\n})();\n\n(function animationStartedClosure() {\n  // The offsetParent is not set until the pdf.js iframe or object is visible.\n  // Waiting for first animation.\n  var requestAnimationFrame = window.requestAnimationFrame ||\n                              window.mozRequestAnimationFrame ||\n                              window.webkitRequestAnimationFrame ||\n                              window.oRequestAnimationFrame ||\n                              window.msRequestAnimationFrame ||\n                              function startAtOnce(callback) { callback(); };\n  PDFView.animationStartedPromise = new PDFJS.Promise();\n  requestAnimationFrame(function onAnimationFrame() {\n    PDFView.animationStartedPromise.resolve();\n  });\n})();\n\n\n",
			"file": "Resources/html/viewer.js",
			"file_size": 104569,
			"file_write_time": 130114980309394870,
			"settings":
			{
				"buffer_size": 104569,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Resources/html/pdf.file",
			"settings":
			{
				"buffer_size": 1541274,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Resources/html/pdfflip.file",
			"settings":
			{
				"buffer_size": 2691,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Resources/html/style.css",
			"settings":
			{
				"buffer_size": 3105,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 150.0,
		"selected_items":
		[
			[
				"ssjs",
				"Set Syntax: JavaScript"
			],
			[
				"ss",
				"Set Syntax: PHP"
			],
			[
				"ssphp",
				"Set Syntax: PHP"
			],
			[
				"ss:ja",
				"Set Syntax: JavaScript"
			],
			[
				"ss:php",
				"Set Syntax: PHP"
			],
			[
				"ss:p",
				"Set Syntax: PHP"
			],
			[
				"pac",
				"Preferences: Browse Packages"
			],
			[
				"ss:hp",
				"Set Syntax: PHP"
			]
		],
		"width": 392.0
	},
	"console":
	{
		"height": 146.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/worg/Documents/Titanium_Studio_Workspace/ionic/Resources/html/pdfflip.file",
		"/C/Users/worg/Documents/Titanium_Studio_Workspace/ionic/Resources/html/pdf.js",
		"/C/Users/worg/Documents/Titanium_Studio_Workspace/ionic/Resources/html/titanium.js",
		"/D/instaladores/Multimedia/Adobe.After.Effects.CS6.v11.0.1.12.Multilingual.mundomanauales.com/Instrucciones.txt",
		"/C/Users/worg/Documents/Titanium_Studio_Workspace/ionic/Resources/app.js",
		"/D/xampp/htdocs/viewer/pdfflip.file",
		"/C/Users/worg/Documents/Titanium_Studio_Workspace/ck-digital-sales-checkin/build/android/AndroidManifest.xml",
		"/C/Users/worg/Documents/Titanium_Studio_Workspace/ck-digital-sales-checkin/tiapp.xml",
		"/C/Users/worg/Documents/localdev/benCoding.AlarmManager/Module/build.properties",
		"/C/Users/worg/Documents/localdev/benCoding.AlarmManager/Module/build.xml",
		"/C/Users/worg/AppData/Roaming/Titanium/mobilesdk/win32/3.0.2.GA/win32/findpython.bat",
		"/C/Users/worg/Documents/Titanium_Studio_Workspace/ck-digital-sales-checkin/Resources/lib/acs.js",
		"/C/Users/worg/Documents/Titanium_Studio_Workspace/ck-digital-sales-checkin/Resources/app.js",
		"/C/Users/worg/Documents/Titanium_Studio_Workspace/ck-digital-sales-checkin/Resources/ui/handheld/android/wCheckin.js",
		"/C/Users/worg/Documents/Titanium_Studio_Workspace/ck-digital-sales-checkin/Resources/ui/handheld/android/wAuthentication.js",
		"/C/Users/worg/Documents/Titanium_Studio_Workspace/ck-digital-sales-checkin/Resources/-ui/ui.js",
		"/C/Users/worg/Documents/Titanium_Studio_Workspace/ck-digital-sales-checkin/build.log",
		"/C/Users/worg/Documents/Titanium_Studio_Workspace/ck-digital-sales-checkin/.project",
		"/C/Users/worg/Documents/Titanium_Studio_Workspace/ck-digital-sales-checkin/manifest",
		"/C/Users/worg/Documents/Titanium_Studio_Workspace/ck-digital-sales-checkin/Resources/ui/common/_visits/vVisits.js",
		"/C/Users/worg/Documents/Titanium_Studio_Workspace/ck-digital-sales-checkin/Resources/ui/common/_visits/cVisits.js",
		"/C/Users/worg/Documents/Titanium_Studio_Workspace/ck-digital-sales-mobile-android/Resources/.DS_Store",
		"/C/Users/worg/AppData/Local/Temp/mnlt2_by_fanco86-d31gx6o/How to install this.txt",
		"/C/Users/worg/AppData/Local/Temp/cajero.cpp",
		"/E/xampp/htdocs/test/css/grid.css",
		"/D/instaladores/Activadores Varios/BootSLIC/Intel_BIOS_EFI_SLIC_Tool/RUNME.bat",
		"/D/instaladores/Activadores Varios/BootSLIC/Intel_BIOS_EFI_SLIC_Tool/README.txt",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/post-grid-small.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/js/script.js",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/css/ie.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/content.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/post-grid",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/css/960_12_col.css",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/functions.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/footer.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/editor-style.css",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/editor-style-rtl.css",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/content-status.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/page-templates/front-page.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/content-quote.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/content-page.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/content-none.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/content-link.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/content-image.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/content-aside.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/comments.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/category.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/author.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/archive.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/page-templates/products.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/plugins-needed.txt",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/tag.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/single.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/sidebar.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/sidebar-front.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/search.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/rtl.css",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/page.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/index.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/image.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/header.php",
		"/D/xampp/htdocs/avicat/wp-content/plugins/collapsing-categories/collapsFunctions.js",
		"/D/xampp/htdocs/avicat/wp-content/themes/avicat/page-templates/full-width.php",
		"/D/xampp/htdocs/avicat/wp-content/plugins/collapsing-categories/readme.txt",
		"/D/xampp/htdocs/avicat/wp-content/themes/blankSlate-theme/404.php",
		"/D/xampp/htdocs/avicat/wp-content/themes/blankSlate-theme/style.css",
		"/D/xampp/htdocs/avicat/wp-content/themes/blankSlate-theme/css/fonts/stylesheet.css",
		"/D/xampp/htdocs/cseguras/css/960.css",
		"/D/xampp/htdocs/cseguras/css/960_12_col.css",
		"/D/xampp/htdocs/avicat/wp-content/themes/blankSlate-theme/screenshot.png",
		"/D/xampp/htdocs/avicat/wp-content/themes/twentytwelve/functions.php",
		"/D/instaladores/Multimedia/Renoise.v2.5.1-UNION/union.nfo",
		"/D/instaladores/Multimedia/Renoise.v2.5.1-UNION/file_id.diz",
		"/D/instaladores/Multimedia/Renoise.v2.5.1-UNION/Installer.dat",
		"/D/xampp/htdocs/avicat/wp-config.php",
		"/D/xampp/htdocs/wordpress/wp-config.php",
		"/C/Users/worg/Dropbox/Docs/upmh/2Sem/Redes/slides",
		"/C/Users/worg/AppData/Local/Temp/hakimel-reveal.js-v2.2-22-gcf8708f/slides_redes_ccna7/index.html",
		"/C/Users/worg/AppData/Local/Temp/hakimel-reveal.js-v2.2-22-gcf8708f/hakimel-reveal.js-cf8708f/index.html",
		"/C/Users/worg/AppData/Local/Temp/hakimel-reveal.js-v2.2-22-gcf8708f/hakimel-reveal.js-cf8708f/.travis.yml",
		"/C/Users/worg/Documents/localdev/4mc_webcourse/css3/index.html",
		"/C/Users/worg/Documents/localdev/html/index.html",
		"/C/Users/worg/AppData/Local/Temp/Conjuntos.cpp",
		"/C/Users/worg/Downloads/NssPro_0.52/Readme.txt",
		"/D/instaladores/Multimedia/Native Instruments Reaktor 5 v5.8.0 UNLOCKED - R2R [deepstatus]/iNF0/R2R.nfo",
		"/D/instaladores/Multimedia/Native Instruments Reaktor 5 v5.8.0 UNLOCKED - R2R [deepstatus]/iNF0/NFO.nfo",
		"/D/Worg/Documents/Visual Studio 2008/Projects/RiemannBasic/RiemannBasic/codigoraro.txt",
		"/D/Descargas/lol.txt",
		"/D/xampp/htdocs/romanomica/app/views/edit/products.php",
		"/D/xampp/htdocs/romanomica/app/models/workingtime_m.php",
		"/D/xampp/htdocs/romanomica/app/models/places_m.php",
		"/D/xampp/htdocs/romanomica/app/models/users_m.php",
		"/D/xampp/htdocs/romanomica/app/models/products_m.php",
		"/D/xampp/htdocs/romanomica/app/config/config.php",
		"/D/xampp/htdocs/romanomica/app/config/database.php",
		"/D/xampp/htdocs/romanomica/app/controllers/add.php",
		"/D/xampp/htdocs/romanomica/js/addProducts.js",
		"/D/xampp/htdocs/romanomica/js/main.js",
		"/D/xampp/htdocs/romanomica/js/autoproducts.js",
		"/D/xampp/htdocs/romanomica/app/controllers/autocomplete.php",
		"/D/xampp/htdocs/romanomica/app/controllers/validate.php",
		"/D/xampp/htdocs/romanomica/app/controllers/login.php",
		"/D/xampp/htdocs/romanomica/app/views/login_view.php",
		"/D/xampp/htdocs/romanomica/app/views/validate.php",
		"/D/xampp/htdocs/romanomica/app/controllers/edit.php",
		"/D/xampp/htdocs/romanomica/app/views/add/users.php",
		"/D/xampp/htdocs/romanomica/app/views/add/products.php",
		"/D/xampp/htdocs/romanomica/app/views/add/product_char.php",
		"/D/xampp/htdocs/romanomica/app/views/add/places.php",
		"/D/xampp/htdocs/romanomica/app/views/edit/places.php",
		"/D/xampp/htdocs/romanomica/app/views/edit/users.php",
		"/D/xampp/htdocs/romanomica/app/controllers/panel.php",
		"/D/xampp/htdocs/romanomica/app/views/head.php",
		"/D/xampp/htdocs/romanomica/app/views/list_places.php",
		"/D/xampp/htdocs/romanomica/app/views/edit_view.php",
		"/D/xampp/htdocs/romanomica/app/views/list_products.php",
		"/D/xampp/htdocs/romanomica/js/autoplaces.js",
		"/D/xampp/htdocs/romanomica/css/main.css",
		"/D/xampp/htdocs/romanomica/.htaccess",
		"/D/instaladores/Dev n Dev tools/sublimetext2/Data/Packages/Default/Preferences.sublime-settings",
		"/D/instaladores/Dev n Dev tools/sublimetext2/Data/Packages/User/Preferences.sublime-settings",
		"/D/xampp/htdocs/romanomica/js/productsOther.js",
		"/D/instaladores/Desktop Themes and Goodies/qttabbar_for_w7_default_theme_by_bluex_pl-d37ry5h/aero/info.txt",
		"/D/instaladores/Desktop Themes and Goodies/qttabar_for_soft7_by_helkin86-d2xxpjv/QTTaBar for Soft7/Info.txt",
		"/D/xampp/htdocs/romanomica/app/views/list_users.php",
		"/C/Users/worg/AppData/Local/Temp/heimdall-suite-1.3.2-win32/Heimdall Suite/README.txt",
		"/D/xampp/htdocs/cseguras/app/views/home.php",
		"/D/xampp/htdocs/cseguras/app/controllers/home.php"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"<open folders>,<open files>",
			"",
			"C:\\Users\\worg\\Downloads\\claudia@4mc.mx_Constructorio\\phps\\*.php",
			"C:\\Users\\worg\\Downloads\\claudia@4mc.mx_Constructorio\\phps,*.php",
			"C:\\Users\\worg\\Downloads\\claudia@4mc.mx - Constructorio - Logos, Tipo y Font\\phps",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"drawima",
			"progressbar",
			"loadingbar",
			"_indeterminate",
			"pdfviewpro",
			"pdfviewi",
			"loadingbar",
			"loading",
			"progress",
			"indeterminate",
			"progress",
			"open",
			"uint8Array",
			"open",
			"mozl1",
			"getdocument",
			"scale",
			".render",
			"render",
			"getDocument",
			"getpdf",
			"getDocument",
			");\n",
			"\"",
			"app://",
			"src=\"",
			"param",
			"\\",
			"C:",
			"/",
			"CREATE",
			"cloud.sess",
			"});\n",
			"Titanium",
			"user",
			"get",
			"username",
			"_ap",
			"_",
			"addch",
			"checkin",
			" {",
			"info_client",
			"make_checkin",
			"addCheckin",
			"addc",
			"Titanium.",
			"Ti.App.Properties",
			"client",
			"check",
			"make_checkin",
			"makecheckin",
			"checkin",
			"make_ch",
			"check",
			"applicat",
			"check",
			"App",
			":'",
			"});\n",
			"authe",
			"vlogin",
			"stylecontainer",
			"container",
			"wauth",
			"wa",
			"info_client",
			"make_checkin",
			"addCheckin",
			"checkin",
			"client",
			"}\n",
			"title",
			"avicat_load_javascript_files",
			"');\n",
			"script",
			"avicat",
			"text-decoration",
			"hidden",
			"box-s",
			":after",
			"2s",
			"font-s",
			":after",
			"content",
			"h3",
			"0.05",
			"15s",
			"-webkit-transition: box-shadow 0.15s ease-in-out;",
			"-webkit-transition: box-shadow 0.15s ease-in-out;\n    -webkit-transition: box-shadow 0.15s ease-in-out;",
			"-webkit-transition: box-shadow 0.15s ease-in-out;",
			"input[type=\"button\"]",
			"-webkit-transition: all 0.2s ease-in-out;",
			".css",
			".js",
			"footer",
			".center",
			".js",
			"blankSlate",
			"name=\"",
			"home",
			"193A6F",
			"page-men",
			"url('montserrat",
			".content",
			"style.css",
			"shawn cope",
			"shawn coope",
			"blankSlate",
			"css",
			".js",
			"http://localhost/redes",
			"http://127.0.0.1:8080/",
			"http://localhost:8080",
			"http://127.0.0.1:8080/imgs",
			"http://localhost:8080",
			"[",
			"&& $p[0]->",
			"[]\"",
			"[-1]",
			"');\n",
			"[]\"",
			"Places",
			"hidden",
			"chars[<?php echo $k ?>]",
			"[<?php echo $k ?>]\"",
			"update",
			"updateplace"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"avicat",
			"\" >",
			"<img src=\"<?php echo base_url() ?>/img/logo_segob.png\" alt=\"logo_segob\">",
			"<img src=\"<?php echo base_url() ?>/img/logo_cseguras.png\" alt=\"logo_main\">",
			"<button id=\"delete\">Eliminar</button>",
			"<button id=\"edit\">Editar</button>",
			"<h1 class=\"frontpage\"><a href=\"<?php echo base_url() ?>\">RO<br>MA<br>NÓ<br>MI<br>CA</a></h1>",
			"<a href=\"<?php echo base_url() ?>\"><h1 class=\"frontpage\">RO<br>MA<br>NÓ<br>MI<br>CA</h1></a>",
			"<h1 class=\"frontpage\">RO<br>MA<br>NÓ<br>MI<br>CA</h1>",
			"array('normalize.min','main');",
			"em",
			"\\/\\/retro\\.grooveshark",
			"$this->userID",
			"DNC_CursosCorp",
			"'",
			"href=\"javascript:void(0)\"",
			"pattern2.png) no-repeat",
			"\"",
			"onclick=\"func(); return false;\"><div class=\"bulletInactive\"></div>",
			"",
			"bulletInactive\"></",
			"onclick=\"func(); return false;\"><div class=\"bulletInactive></div>",
			"onclick=\"func(); return false;\"><div class=\"bulletInactive\"></div>",
			"<a href=\"http://beta.4mc.mx/cuestionario/index.php?sid=33422&newtest=Y&lang=es-MX?iframe=true&width=100%&height=100%\" rel=\"prettyPhoto[iframes]\"",
			"&height=100%\"",
			"<a href=\"http://beta.4mc.mx/cuestionario/index.php?sid=33422&newtest=Y&lang=es-MX?iframe=true&width=100%&height=100\" rel=\"prettyPhoto[iframes]\"",
			"http://beta.4mc.mx/cuestionario/index.php?sid=33422&newtest=Y&lang=es-MX",
			"class=\"close\"",
			"class=\"next\"",
			"img",
			"cerr\"></div>",
			"<div class=\"button sig\"></div>",
			"<div class=\"button cerr\">",
			"<div class=\"button sig\">",
			"href=\"#\"",
			"href=\"\"",
			"href=\"#\"",
			"12px",
			"burbuja",
			".burbuja",
			"triangle-obtuse",
			"naranja",
			"magenta",
			"azul",
			"rojo",
			"amarillo",
			"FFF008",
			"EF4035",
			"EC008C",
			"F7901E",
			"007DC3",
			"C3CF21",
			".verde",
			".wpui-verde",
			"wpui-verde",
			"0px",
			"wpui-green",
			".wpui-green",
			".wpui-light",
			".verde",
			".wpui-light",
			"<div class=\"polos\"><li><a style=\"padding-left:22px;\" href=\"<?php bloginfo('url'); ?>/polos/\">POLOS URBANOS</a></li></div>\n       <div class=\"corredores\"> <li><a style=\"padding-left:22px;\" href=\"<?php bloginfo('url'); ?>/corredores/\">CORREDORES URBANOS</a></li></div>",
			"<div class=\"polos\"><li><a style=\"padding-left:22px;\" href=\"<?php bloginfo('url'); ?>/polos/\">POLOS</a></li></div>\n       <div class=\"corredores\"> <li><a style=\"padding-left:22px;\" href=\"<?php bloginfo('url'); ?>/corredores/\">CORREDORES</a></li></div>",
			"img",
			"resp",
			"../img/"
		],
		"reverse": true,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 8,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Resources/html/viewer.html",
					"settings":
					{
						"buffer_size": 1363,
						"regions":
						{
						},
						"selection":
						[
							[
								273,
								273
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Resources/app.js",
					"settings":
					{
						"buffer_size": 2451,
						"regions":
						{
						},
						"selection":
						[
							[
								1932,
								1932
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 480.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"settings":
					{
						"buffer_size": 243,
						"regions":
						{
						},
						"selection":
						[
							[
								243,
								243
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"settings":
					{
						"buffer_size": 49,
						"regions":
						{
						},
						"selection":
						[
							[
								49,
								49
							]
						],
						"settings":
						{
							"auto_name": "<p>",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"settings":
					{
						"buffer_size": 2417,
						"regions":
						{
						},
						"selection":
						[
							[
								2046,
								2046
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 180.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Resources/html/viewer_1.html",
					"settings":
					{
						"buffer_size": 1363,
						"regions":
						{
						},
						"selection":
						[
							[
								310,
								310
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Resources/html/viewer.js",
					"settings":
					{
						"buffer_size": 104569,
						"regions":
						{
						},
						"selection":
						[
							[
								813,
								813
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Resources/html/pdf.file",
					"settings":
					{
						"buffer_size": 1541274,
						"regions":
						{
						},
						"selection":
						[
							[
								828,
								840
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 720.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "Resources/html/pdfflip.file",
					"settings":
					{
						"buffer_size": 2691,
						"regions":
						{
						},
						"selection":
						[
							[
								840,
								840
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 300.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "Resources/html/style.css",
					"settings":
					{
						"buffer_size": 3105,
						"regions":
						{
						},
						"selection":
						[
							[
								306,
								306
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 125.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 35.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 118.0
	},
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"",
				"single.php"
			],
			[
				"sing",
				"single.php"
			],
			[
				"post",
				"post-grid.php"
			],
			[
				"sc",
				"js/script.js"
			],
			[
				"he",
				"header.php"
			],
			[
				"h",
				"header.php"
			],
			[
				"grid",
				"post-grid.php"
			],
			[
				"scr",
				"js/script.js"
			],
			[
				"front",
				"page-templates/front-page.php"
			],
			[
				"sin",
				"single.php"
			],
			[
				"hea",
				"header.php"
			],
			[
				"po",
				"post-grid.php"
			],
			[
				"post-g",
				"post-grid.php"
			],
			[
				"head",
				"header.php"
			],
			[
				"pl",
				"plugins-needed.txt"
			],
			[
				"fu",
				"functions.php"
			],
			[
				"funct",
				"functions.php"
			],
			[
				"f",
				"functions.php"
			],
			[
				"side",
				"sidebar.php"
			],
			[
				"cnt",
				"content.php"
			],
			[
				"foot",
				"footer.php"
			],
			[
				"main",
				"css/main.css"
			],
			[
				"places_",
				"models/places_m.php"
			],
			[
				"au",
				"js/autoplaces.js"
			],
			[
				"pla",
				"views/edit/places.php"
			],
			[
				"mai",
				"css/main.css"
			],
			[
				"ed",
				"controllers/edit.php"
			],
			[
				"ad",
				"controllers/add.php"
			],
			[
				"unt",
				"untitled"
			],
			[
				"edi",
				"controllers/edit.php"
			],
			[
				"list",
				"views/list_places.php"
			],
			[
				"li",
				"views/list_places.php"
			],
			[
				"ma",
				"css/main.css"
			],
			[
				"places",
				"models/places_m.php"
			],
			[
				"users",
				"views/add/users.php"
			],
			[
				"count",
				"js/countries.js"
			],
			[
				"plac",
				"models/places_m.php"
			],
			[
				"add",
				"controllers/add.php"
			],
			[
				"te",
				"views/template.php"
			],
			[
				"dat",
				"/D/xampp/htdocs/romanomica/app/config/database.php"
			],
			[
				"tem",
				"views/template.php"
			],
			[
				"prod",
				"models/products_m.php"
			],
			[
				"edit",
				"controllers/edit.php"
			],
			[
				"products_m",
				"models/products_m.php"
			],
			[
				"a",
				"controllers/add.php"
			],
			[
				"auto",
				"js/autoproducts.js"
			],
			[
				"auo",
				"js/autoproducts.js"
			],
			[
				"data",
				"config/database.php"
			],
			[
				"log",
				"controllers/login.php"
			],
			[
				"logi",
				"views/login.php"
			],
			[
				"user",
				"controllers/admin/user.php"
			],
			[
				"art",
				"controllers/admin/article.php"
			],
			[
				"me",
				"controllers/admin/media.php"
			],
			[
				"mod",
				"views/posts/modify.php"
			],
			[
				"tempa",
				"views/template.php"
			],
			[
				"home",
				"views/home.php"
			],
			[
				"ho",
				"controllers/home.php"
			],
			[
				"sideb",
				"views/home/sidebar.php"
			],
			[
				"town",
				"models/admin/towns.php"
			],
			[
				"prof",
				"controllers/profile.php"
			],
			[
				"contr",
				"controllers/article.php"
			],
			[
				"ric",
				"js/richEditor.js"
			],
			[
				"temp",
				"views/template.php"
			],
			[
				"cate",
				"models/admin/category.php"
			],
			[
				"v",
				"views/posts/view.php"
			],
			[
				"vie",
				"views/posts/view.php"
			],
			[
				"admin",
				"controllers/admin/article.php"
			],
			[
				"view",
				"views/posts/view.php"
			],
			[
				"modif",
				"views/users/modify.php"
			],
			[
				"us",
				"controllers/admin/user.php"
			],
			[
				"listme",
				"js/listMedia.js"
			],
			[
				"lis",
				"js/listUsers.js"
			],
			[
				"listu",
				"js/listUsers.js"
			],
			[
				"media",
				"controllers/admin/media.php"
			],
			[
				"med",
				"controllers/admin/media.php"
			],
			[
				"listm",
				"js/listMedia.js"
			],
			[
				"lo",
				"controllers/login.php"
			],
			[
				"ar",
				"controllers/admin/article.php"
			],
			[
				"aadd",
				"views/media/add.php"
			],
			[
				"res",
				"css/reset.css"
			],
			[
				"tow",
				"models/admin/towns.php"
			],
			[
				"rese",
				"css/reset.css"
			],
			[
				"nor",
				"css/normalize.css"
			],
			[
				"controllers",
				"controllers/add.php"
			],
			[
				"autoco",
				"controllers/autocomplete.php"
			],
			[
				"aar",
				"models/admin/article.php"
			],
			[
				"artic",
				"controllers/admin/article.php"
			],
			[
				"riche",
				"js/richEditor.js"
			],
			[
				"hom",
				"controllers/home.php"
			],
			[
				"ve",
				"views/posts/view.php"
			],
			[
				"states",
				"models/admin/states.php"
			],
			[
				"css",
				"css/main.css"
			],
			[
				"stat",
				"models/admin/states.php"
			],
			[
				"subca",
				"models/admin/subcategory.php"
			],
			[
				"listp",
				"js/listPosts.js"
			],
			[
				"arti",
				"controllers/admin/article.php"
			],
			[
				"ca",
				"js/categories.js"
			],
			[
				"sta",
				"models/admin/state.php"
			],
			[
				"admin/",
				"controllers/admin/media.php"
			],
			[
				"add/user",
				"views/add/users.php"
			],
			[
				"users_m",
				"models/users_m.php"
			],
			[
				"use",
				"views/edit/users.php"
			],
			[
				"list_pa",
				"views/list_places.php"
			],
			[
				"pane",
				"controllers/panel.php"
			],
			[
				"product_",
				"models/products_m.php"
			],
			[
				"lit",
				"views/list_products.php"
			],
			[
				"add.",
				"controllers/add.php"
			],
			[
				"edot",
				"views/edit/products.php"
			],
			[
				"func",
				"/X/wp-content/themes/Backstreet/functions.php"
			],
			[
				"pag",
				"/X/wp-content/themes/Backstreet/page.php"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 185.0,
	"status_bar_visible": true
}
